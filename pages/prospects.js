import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
// Layout is handled by _app.js
import { supabase } from '../utils/supabaseClient';
import { exportProspectsToExcel, exportProspectReportToPDF } from '../utils/exportUtils';
import styles from '../styles/Prospects.module.css';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

const STAGES = [
  { id: 'ÂàùË´á', label: 'ÂàùË´á', color: '#94a3b8' },
  { id: 'ÊèêÊ°à', label: 'ÊèêÊ°à', color: '#6366f1' },
  { id: 'Â†±ÂÉπ', label: 'Â†±ÂÉπ', color: '#60a5fa' },
  { id: 'Ë´áÂà§', label: 'Ë´áÂà§', color: '#fbbf24' },
  { id: 'ÂæÖÁ∞ΩÁ¥Ñ', label: 'ÂæÖÁ∞ΩÁ¥Ñ', color: '#34d399' },
  { id: 'Â∑≤Â§±ÂñÆ', label: 'Â∑≤Â§±ÂñÆ', color: '#f87171' },
  { id: 'Â∑≤ËΩâÊèõ', label: 'Â∑≤ËΩâÊèõ', color: '#10b981' }
];

const CLOSE_RATE_OPTIONS = [
  { value: 'high', label: 'È´ò', color: '#ef4444', percentage: 80 },
  { value: 'medium', label: '‰∏≠', color: '#f59e0b', percentage: 50 },
  { value: 'low', label: '‰Ωé', color: '#6b7280', percentage: 20 }
];

const BUDGET_STATUS_OPTIONS = [
  { value: 'sufficient', label: 'Á¨¶Âêà', color: '#10b981' },
  { value: 'insufficient', label: '‰∏çÂ§†', color: '#f59e0b' },
  { value: 'too_low', label: 'Â§™‰Ωé', color: '#ef4444' }
];

const ASSISTANCE_TYPES = [
  { value: 'review_quote', label: 'ÂØ©Ê†∏Â†±ÂÉπÂñÆ', priority: 'high' },
  { value: 'approve_proposal', label: 'Ê†∏ÂáÜÊèêÊ°à', priority: 'high' },
  { value: 'negotiation_support', label: 'Ë´áÂà§ÊîØÊè¥', priority: 'medium' },
  { value: 'technical_review', label: 'ÊäÄË°ìÂØ©Ê†∏', priority: 'medium' },
  { value: 'pricing_approval', label: 'ÂÉπÊ†ºÊ†∏ÂáÜ', priority: 'high' },
  { value: 'contract_review', label: 'ÂêàÁ¥ÑÂØ©Êü•', priority: 'high' },
  { value: 'relationship_support', label: 'Èóú‰øÇÁ∂≠Ë≠∑ÊîØÊè¥', priority: 'low' },
  { value: 'other', label: 'ÂÖ∂‰ªñ', priority: 'medium' }
];

const PRIORITY_OPTIONS = [
  { value: 'urgent', label: 'Á∑äÊÄ•', color: '#ef4444' },
  { value: 'high', label: 'È´ò', color: '#f59e0b' },
  { value: 'medium', label: '‰∏≠', color: '#6366f1' },
  { value: 'low', label: '‰Ωé', color: '#6b7280' }
];

const ACTION_TYPES = [
  { value: 'phone', label: 'ÈõªË©±ËÅØÁµ°', icon: 'üìû', color: '#10b981' },
  { value: 'meeting', label: 'Èù¢Ë´áÊúÉË≠∞', icon: 'ü§ù', color: '#6366f1' },
  { value: 'presentation', label: 'Áî¢ÂìÅÁ∞°Â†±', icon: 'üìä', color: '#8b5cf6' },
  { value: 'quotation', label: 'Â†±ÂÉπÊèê‰æõ', icon: 'üí∞', color: '#f59e0b' },
  { value: 'document', label: 'Ë≥áÊñôÂØÑÈÄÅ', icon: 'üìÑ', color: '#06b6d4' },
  { value: 'sample', label: 'Ê®£ÂìÅÂØÑÈÄÅ', icon: 'üì¶', color: '#84cc16' },
  { value: 'visit', label: 'ÂÆ¢Êà∂ÊãúË®™', icon: 'üè¢', color: '#ec4899' },
  { value: 'demo', label: 'Áî¢ÂìÅÂ±ïÁ§∫', icon: 'üñ•Ô∏è', color: '#6366f1' },
  { value: 'negotiation', label: 'ÂÉπÊ†ºË´áÂà§', icon: 'üí¨', color: '#f97316' },
  { value: 'contract', label: 'ÂêàÁ¥ÑÁ∞ΩÁΩ≤', icon: '‚úçÔ∏è', color: '#10b981' },
  { value: 'followup', label: 'ÂæåÁ∫åËøΩËπ§', icon: 'üìã', color: '#6b7280' },
  { value: 'other', label: 'ÂÖ∂‰ªñ', icon: 'üìù', color: '#6b7280' }
];

export default function Prospects() {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [prospects, setProspects] = useState([]);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState('priority'); // 'priority' | 'kanban' | 'tasks'
  const [selectedProspect, setSelectedProspect] = useState(null);
  const [filters, setFilters] = useState({
    closeRate: '',
    budgetStatus: '',
    owner: '',
    stage: '',
    source: ''
  });
  const [showModal, setShowModal] = useState(false);
  const [editingProspect, setEditingProspect] = useState(null);
  const [formData, setFormData] = useState({
    client_name: '',
    project_name: '',
    estimated_amount: '',
    commission_rate: 15,
    owner_id: '',
    stage: 'ÂàùË´á',
    expected_sign_date: '',
    source: '',
    note: '',
    use_fixed_commission: false,
    fixed_commission_percentage: '',
    // Êñ∞Â¢ûÊà∞ÊÉÖÂÆ§Ê¨Ñ‰Ωç
    close_rate: 'medium',
    budget_status: 'sufficient',
    next_followup_date: '',
    decision_maker_name: '',
    decision_maker_position: '',
    decision_maker_contact: '',
    key_influencers: '',
    main_pain_points: '',
    close_obstacles: '',
    competitor_name: '',
    competitor_status: 'none'
  });
  const [statistics, setStatistics] = useState(null);
  const [actionRecords, setActionRecords] = useState([]);
  const [showActionModal, setShowActionModal] = useState(false);
  const [actionForm, setActionForm] = useState({
    action_type: 'phone',
    content: '',
    next_followup_date: '',
    attachments: []
  });
  const [showAssistanceModal, setShowAssistanceModal] = useState(false);
  const [assistanceRequests, setAssistanceRequests] = useState([]);
  const [assistanceForm, setAssistanceForm] = useState({
    type: 'review_quote',
    priority: 'medium', 
    description: '',
    deadline: ''
  });
  const [sharedFiles, setSharedFiles] = useState([]);
  const [uploadingFile, setUploadingFile] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [showNotifications, setShowNotifications] = useState(false);
  
  // Activities (Êñ∞‰ªªÂãôÁ≥ªÁµ±) ÁãÄÊÖã
  const [activities, setActivities] = useState([]);
  const [groupedActivities, setGroupedActivities] = useState({
    overdue: [],
    today: [],
    soon: [],
    unscheduled: []
  });
  const [selectedActivities, setSelectedActivities] = useState([]);
  const [selectedProspects, setSelectedProspects] = useState([]);
  const [loadingActivities, setLoadingActivities] = useState(false);
  
  // Ëß∏ÊéßÊªëÂãïÁãÄÊÖã
  const [swipeState, setSwipeState] = useState({
    startX: 0,
    startY: 0,
    currentX: 0,
    isSwiping: false,
    swipedItem: null
  });
  
  // ÁµêÊ°àÂ∞çË©±Ê°ÜÁãÄÊÖã
  const [showClosingDialog, setShowClosingDialog] = useState(false);
  const [closingProspect, setClosingProspect] = useState(null);
  const [closingForm, setClosingForm] = useState({
    result: 'won', // 'won' | 'lost'
    reason: '',
    close_date: new Date().toISOString().split('T')[0],
    final_amount: '',
    notes: ''
  });

  useEffect(() => {
    checkUser();
    fetchUsers();
    fetchProspects();
    fetchStatistics();
  }, []);

  useEffect(() => {
    if (viewMode === 'tasks') {
      fetchActivities();
    }
  }, [viewMode]);

  // Áï∂Ê°à‰ª∂Ë≥áÊñôËÆäÂåñÊôÇË®àÁÆóÊèêÈÜí
  useEffect(() => {
    if (prospects.length > 0) {
      calculateNotifications();
    }
  }, [prospects]);

  // Áï∂ÈÅ∏ÊìáÊ°à‰ª∂ÊôÇËºâÂÖ•ÂÖ±‰∫´Ê™îÊ°àÂíåË°åÂãïË®òÈåÑ
  useEffect(() => {
    if (selectedProspect) {
      fetchSharedFiles(selectedProspect.id);
      fetchActionRecords(selectedProspect.id);
    }
  }, [selectedProspect]);

  const checkUser = async () => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      router.push('/login');
      return;
    }
    
    const { data: userData } = await supabase
      .from('users')
      .select('*')
      .eq('id', user.id)
      .single();
    
    setUser(userData);
  };

  const fetchUsers = async () => {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('id, name, role')
        .in('role', ['sales', 'leader'])
        .order('name');
      
      if (error) {
        console.error('Error fetching users:', error);
        setUsers([]);
        return;
      }
      
      setUsers(data || []);
    } catch (error) {
      console.error('Error fetching users:', error);
      setUsers([]);
    }
  };

  const fetchProspects = async () => {
    try {
      const { data, error } = await supabase
        .from('prospects')
        .select(`
          *,
          owner:users!owner_id(id, name)
        `)
        .not('stage', 'eq', 'Â∑≤ËΩâÊèõ')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setProspects(data || []);
    } catch (error) {
      console.error('Error fetching prospects:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchStatistics = async () => {
    try {
      const { data, error } = await supabase
        .from('prospect_statistics')
        .select('*')
        .single();
      
      if (error) {
        console.warn('Error fetching statistics:', error);
        setStatistics(null);
        return;
      }
      
      setStatistics(data);
    } catch (error) {
      console.error('Error fetching statistics:', error);
      setStatistics(null);
    }
  };

  const fetchActivities = async (owner = 'me', status = 'open') => {
    setLoadingActivities(true);
    try {
      const response = await fetch(`/api/activities?owner=${owner}&status=${status}`);
      if (!response.ok) {
        throw new Error('Failed to fetch activities');
      }
      
      const result = await response.json();
      setActivities(result.activities || []);
      setGroupedActivities(result.grouped || {
        overdue: [],
        today: [],
        soon: [],
        unscheduled: []
      });
    } catch (error) {
      console.error('Error fetching activities:', error);
      setActivities([]);
      setGroupedActivities({
        overdue: [],
        today: [],
        soon: [],
        unscheduled: []
      });
    } finally {
      setLoadingActivities(false);
    }
  };

  const createActivity = async (activityData) => {
    try {
      const response = await fetch('/api/activities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(activityData),
      });

      if (!response.ok) {
        throw new Error('Failed to create activity');
      }

      const result = await response.json();
      
      // ÈáçÊñ∞ËºâÂÖ• activities
      await fetchActivities();
      
      return result.activity;
    } catch (error) {
      console.error('Error creating activity:', error);
      throw error;
    }
  };

  const updateActivity = async (activityId, updateData) => {
    try {
      const response = await fetch(`/api/activities/${activityId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData),
      });

      if (!response.ok) {
        throw new Error('Failed to update activity');
      }

      const result = await response.json();
      
      // ÈáçÊñ∞ËºâÂÖ• activities
      await fetchActivities();
      
      return result.activity;
    } catch (error) {
      console.error('Error updating activity:', error);
      throw error;
    }
  };

  const batchUpdateActivities = async (activityIds, action, data = {}) => {
    try {
      const response = await fetch('/api/activities/batch', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          activity_ids: activityIds,
          action,
          data
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to batch update activities');
      }

      const result = await response.json();
      
      // ÈáçÊñ∞ËºâÂÖ• activities
      await fetchActivities();
      
      return result;
    } catch (error) {
      console.error('Error batch updating activities:', error);
      throw error;
    }
  };

  const handleDragEnd = async (result) => {
    if (!result.destination) return;
    
    const { draggableId, source, destination } = result;
    
    // If dropped in the same position, do nothing
    if (source.droppableId === destination.droppableId && source.index === destination.index) {
      return;
    }
    
    // If moving to a different stage
    if (source.droppableId !== destination.droppableId) {
      const newStage = destination.droppableId;
      const oldStage = source.droppableId;
      
      // Check if moving to terminal stages (Â∑≤Â§±ÂñÆ/Â∑≤ËΩâÊèõ) - should show closing dialog
      if (['Â∑≤Â§±ÂñÆ', 'Â∑≤ËΩâÊèõ'].includes(newStage)) {
        const prospect = prospects.find(p => p.id === draggableId);
        if (prospect) {
          setClosingProspect(prospect);
          setClosingForm({
            result: newStage === 'Â∑≤ËΩâÊèõ' ? 'won' : 'lost',
            reason: '',
            close_date: new Date().toISOString().split('T')[0],
            final_amount: prospect.estimated_amount || '',
            notes: ''
          });
          setShowClosingDialog(true);
        }
        return;
      }
      
      await updateProspectStage(draggableId, newStage, oldStage);
    } else {
      // Handle manual ordering within the same column
      await updateManualOrder(draggableId, destination.droppableId, destination.index);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      if (editingProspect) {
        const { error } = await supabase
          .from('prospects')
          .update({
            ...formData,
            updated_at: new Date().toISOString()
          })
          .eq('id', editingProspect.id);
        
        if (error) throw error;
      } else {
        const { error } = await supabase
          .from('prospects')
          .insert([{
            ...formData,
            owner_id: formData.owner_id || user?.id
          }]);
        
        if (error) throw error;
      }
      
      setShowModal(false);
      resetForm();
      fetchProspects();
      fetchStatistics();
    } catch (error) {
      console.error('Error saving prospect:', error);
      alert('ÂÑ≤Â≠òÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleConvertToProject = async (prospect) => {
    if (!confirm(`Á¢∫ÂÆöË¶ÅÂ∞á„Äå${prospect.project_name}„ÄçËΩâÊèõÁÇ∫Ê≠£ÂºèÂ∞àÊ°àÂóéÔºü`)) return;
    
    const projectCode = prompt('Ë´ãËº∏ÂÖ•Â∞àÊ°àÁ∑®ËôüÔºö');
    if (!projectCode) return;
    
    try {
      const { data, error } = await supabase.rpc('convert_prospect_to_project', {
        p_prospect_id: prospect.id,
        p_project_code: projectCode,
        p_project_type: 'new',
        p_payment_template: 'single'
      });
      
      if (error) throw error;
      
      alert('ËΩâÊèõÊàêÂäüÔºÅ');
      router.push(`/projects/${data}`);
    } catch (error) {
      console.error('Error converting prospect:', error);
      alert('ËΩâÊèõÂ§±ÊïóÔºö' + error.message);
    }
  };

  const resetForm = () => {
    setFormData({
      client_name: '',
      project_name: '',
      estimated_amount: '',
      commission_rate: 15,
      owner_id: user?.id || '', // È†êË®≠ÁÇ∫Áï∂Ââç‰ΩøÁî®ËÄÖ
      stage: 'ÂàùË´á',
      expected_sign_date: '',
      source: '',
      note: '',
      use_fixed_commission: false,
      fixed_commission_percentage: '',
      // Êà∞ÊÉÖÂÆ§Êñ∞Ê¨Ñ‰Ωç
      close_rate: 'medium',
      budget_status: 'sufficient',
      next_followup_date: '',
      decision_maker_name: '',
      decision_maker_position: '',
      decision_maker_contact: '',
      key_influencers: '',
      main_pain_points: '',
      close_obstacles: '',
      competitor_name: '',
      competitor_status: 'none'
    });
    setEditingProspect(null);
  };

  const openEditModal = (prospect) => {
    setEditingProspect(prospect);
    setFormData({
      client_name: prospect.client_name,
      project_name: prospect.project_name,
      estimated_amount: prospect.estimated_amount,
      commission_rate: prospect.commission_rate,
      owner_id: prospect.owner_id,
      stage: prospect.stage,
      expected_sign_date: prospect.expected_sign_date || '',
      source: prospect.source || '',
      note: prospect.note || '',
      use_fixed_commission: prospect.use_fixed_commission || false,
      fixed_commission_percentage: prospect.fixed_commission_percentage || '',
      // Êà∞ÊÉÖÂÆ§Êñ∞Ê¨Ñ‰Ωç
      close_rate: prospect.close_rate || 'medium',
      budget_status: prospect.budget_status || 'sufficient',
      next_followup_date: prospect.next_followup_date || '',
      decision_maker_name: prospect.decision_maker_name || '',
      decision_maker_position: prospect.decision_maker_position || '',
      decision_maker_contact: prospect.decision_maker_contact || '',
      key_influencers: prospect.key_influencers || '',
      main_pain_points: prospect.main_pain_points || '',
      close_obstacles: prospect.close_obstacles || '',
      competitor_name: prospect.competitor_name || '',
      competitor_status: prospect.competitor_status || 'none'
    });
    setShowModal(true);
  };

  const getFunnelData = () => {
    const stageOrder = ['ÂàùË´á', 'Â†±ÂÉπ‰∏≠', 'Á≠âÂÆ¢Êà∂ÂõûË¶Ü', 'Á¢∫Ë™çÁ∞ΩÁ¥Ñ'];
    return stageOrder.map(stage => ({
      stage,
      value: prospects.filter(p => p.stage === stage).length,
      fill: STAGES.find(s => s.id === stage)?.color || '#94a3b8'
    }));
  };

  const getPipelineValue = () => {
    return prospects
      .filter(p => !['Â∑≤Â§±ÂñÆ', 'Â∑≤ËΩâÊèõ'].includes(p.stage))
      .reduce((sum, p) => sum + parseFloat(p.estimated_amount || 0), 0);
  };

  const getEstimatedCommission = () => {
    return prospects
      .filter(p => !['Â∑≤Â§±ÂñÆ', 'Â∑≤ËΩâÊèõ'].includes(p.stage))
      .reduce((sum, p) => sum + (parseFloat(p.estimated_amount || 0) * parseFloat(p.commission_rate || 0) / 100), 0);
  };

  // Ë®àÁÆóÂàÜÊΩ§ÊØî‰æãÔºàÈöéÊ¢ØÂºè vs Âõ∫ÂÆöÔºâ
  const calculateCommissionRate = (amount, useFixed = false, fixedRate = '') => {
    if (useFixed && fixedRate) {
      return parseFloat(fixedRate);
    }
    
    // ÈöéÊ¢ØÂºèÂàÜÊΩ§ÊØî‰æã
    if (amount <= 100000) return 35;
    if (amount <= 300000) return 30;
    if (amount <= 600000) return 25;
    if (amount <= 1000000) return 20;
    return 10;
  };

  // Áï∂ÈáëÈ°çËÆäÂåñÊôÇËá™ÂãïË®àÁÆóÂàÜÊΩ§ÊØî‰æã
  const handleAmountChange = (amount) => {
    const newAmount = parseFloat(amount) || 0;
    let newCommissionRate = formData.commission_rate;
    
    if (!formData.use_fixed_commission) {
      newCommissionRate = calculateCommissionRate(newAmount);
    }
    
    setFormData({
      ...formData,
      estimated_amount: amount,
      commission_rate: newCommissionRate
    });
  };

  // ËôïÁêÜË°®Ê†ºÊ®°ÂºèÁöÑÈöéÊÆµËÆäÊõ¥
  const handleStageChange = async (prospectId, newStage) => {
    const prospect = prospects.find(p => p.id === prospectId);
    const oldStage = prospect?.stage;
    
    if (oldStage === newStage) return;
    
    await updateProspectStage(prospectId, newStage, oldStage);
  };

  // ÂÖ±Áî®ÁöÑÈöéÊÆµÊõ¥Êñ∞ÂáΩÊï∏
  const updateProspectStage = async (prospectId, newStage, oldStage) => {
    try {
      // Update local state optimistically
      const updatedProspects = prospects.map(p => 
        p.id === prospectId ? { ...p, stage: newStage, stage_updated_at: new Date().toISOString() } : p
      );
      setProspects(updatedProspects);

      // Update in database
      const { error } = await supabase
        .from('prospects')
        .update({ 
          stage: newStage, 
          updated_at: new Date().toISOString()
          // stage_updated_at ÊúÉÁî±Ëß∏ÁôºÂô®Ëá™ÂãïÊõ¥Êñ∞
        })
        .eq('id', prospectId);
      
      if (error) {
        console.error('Error updating prospect stage:', error);
        alert(`Êõ¥Êñ∞ÈöéÊÆµÂ§±ÊïóÔºö${error.message}`);
        // Revert on error
        await fetchProspects();
        return;
      }

      // Log the change (ËôïÁêÜÂèØËÉΩÁöÑÈåØË™§)
      try {
        await supabase.from('prospect_activities').insert({
          prospect_id: prospectId,
          user_id: user?.id,
          activity_type: 'stage_change',
          old_value: oldStage,
          new_value: newStage,
          description: `ÈöéÊÆµÂæû ${oldStage} ËÆäÊõ¥ÁÇ∫ ${newStage}`
        });
      } catch (logError) {
        console.warn('Failed to log stage change:', logError);
        // ‰∏çÂΩ±Èüø‰∏ªË¶ÅÂäüËÉΩÔºåÂè™ÊòØË®òÈåÑÂ§±Êïó
      }
    } catch (error) {
      console.error('Unexpected error in updateProspectStage:', error);
      alert('Êõ¥Êñ∞ÈöéÊÆµÊôÇÁôºÁîüÊú™È†êÊúüÈåØË™§');
      await fetchProspects();
    }
  };

  const updateManualOrder = async (prospectId, stage, newIndex) => {
    try {
      // ÂèñÂæóË©≤ÈöéÊÆµÁöÑÊâÄÊúâÊ°à‰ª∂ÔºåÊåâÁõÆÂâçÊéíÂ∫èÈ†ÜÂ∫è
      const stageProspects = getSortedProspects().filter(p => p.stage === stage);
      const draggedProspect = stageProspects.find(p => p.id === prospectId);
      
      if (!draggedProspect) {
        console.warn('Dragged prospect not found:', prospectId);
        return;
      }
      
      // ÁßªÈô§Ë¢´ÊãñÊãΩÁöÑÊ°à‰ª∂
      const otherProspects = stageProspects.filter(p => p.id !== prospectId);
      
      // Âú®Êñ∞‰ΩçÁΩÆÊèíÂÖ•
      otherProspects.splice(newIndex, 0, draggedProspect);
      
      // ÈáçÊñ∞ÂàÜÈÖç manual_orderÔºàÂæû1ÈñãÂßãÔºâ
      const updates = otherProspects.map((prospect, index) => ({
        id: prospect.id,
        manual_order: index + 1
      }));
      
      // ÊâπÊ¨°Êõ¥Êñ∞Ë≥áÊñôÂ∫´
      const updatePromises = updates.map(({ id, manual_order }) => 
        supabase
          .from('prospects')
          .update({ 
            manual_order, 
            updated_at: new Date().toISOString() 
          })
          .eq('id', id)
      );
      
      const results = await Promise.all(updatePromises);
      
      // Ê™¢Êü•ÊòØÂê¶ÊúâÊõ¥Êñ∞Â§±Êïó
      const errors = results.filter(result => result.error);
      if (errors.length > 0) {
        console.error('Some manual order updates failed:', errors);
        alert('ÈÉ®ÂàÜÊéíÂ∫èÊõ¥Êñ∞Â§±ÊïóÔºåË´ãÈáçË©¶');
        await fetchProspects();
        return;
      }
      
      // ÈáçÊñ∞ËºâÂÖ•Êï∏Êìö‰ª•ÂèçÊò†Êõ¥Êñ∞
      await fetchProspects();
      
    } catch (error) {
      console.error('Error updating manual order:', error);
      alert(`Êõ¥Êñ∞ÊéíÂ∫èÂ§±ÊïóÔºö${error.message}`);
      // ÁôºÁîüÈåØË™§ÊôÇÈáçÊñ∞ËºâÂÖ•‰ª•Âæ©ÂéüÁãÄÊÖã
      await fetchProspects();
    }
  };

  if (loading) return <div>ËºâÂÖ•‰∏≠...</div>;

  // Êô∫ËÉΩÊéíÂ∫èÂáΩÊï∏
  const getSortedProspects = () => {
    let filtered = prospects.filter(p => !['Â∑≤Â§±ÂñÆ', 'Â∑≤ËΩâÊèõ'].includes(p.stage));
    
    // ÁØ©ÈÅ∏
    if (filters.closeRate) {
      filtered = filtered.filter(p => p.close_rate === filters.closeRate);
    }
    if (filters.budgetStatus) {
      filtered = filtered.filter(p => p.budget_status === filters.budgetStatus);
    }
    if (filters.owner) {
      filtered = filtered.filter(p => p.owner_id === filters.owner);
    }
    if (filters.stage) {
      filtered = filtered.filter(p => p.stage === filters.stage);
    }
    if (filters.source) {
      filtered = filtered.filter(p => p.source && p.source.includes(filters.source));
    }
    
    // ÊéíÂ∫èÔºöÊâãÂãïÊéíÂ∫èÂÑ™ÂÖà ‚Üí Êàê‰∫§ÁéáÈ´ò ‚Üí ‰∏ãÊ¨°ËøΩËπ§Êó•ÊúüËøë ‚Üí È†ê‰º∞ÈáëÈ°çÂ§ß
    return filtered.sort((a, b) => {
      // 0. ÊâãÂãïÊéíÂ∫èÂÑ™ÂÖàÔºàÂêåÈöéÊÆµÂÖßÔºâ
      if (a.stage === b.stage) {
        const aManualOrder = parseInt(a.manual_order || 0);
        const bManualOrder = parseInt(b.manual_order || 0);
        if (aManualOrder !== bManualOrder && (aManualOrder > 0 || bManualOrder > 0)) {
          // ÊâãÂãïÊéíÂ∫èÂÄºÂ§ßÁöÑÂú®ÂâçÔºàÊúÄÂæåÊãñÊãΩÁöÑÂú®ÊúÄÂâçÔºâ
          if (aManualOrder === 0) return 1; // a Ê≤íÊúâÊâãÂãïÊéíÂ∫èÔºåb Âú®Ââç
          if (bManualOrder === 0) return -1; // b Ê≤íÊúâÊâãÂãïÊéíÂ∫èÔºåa Âú®Ââç
          return aManualOrder - bManualOrder; // ÈÉΩÊúâÊâãÂãïÊéíÂ∫èÔºåÂ∞èÊï∏ÂÄºÂú®Ââç
        }
      }
      
      // 1. Êàê‰∫§ÁéáÊéíÂ∫è
      const aCloseRate = CLOSE_RATE_OPTIONS.find(opt => opt.value === (a.close_rate || 'medium'))?.percentage || 50;
      const bCloseRate = CLOSE_RATE_OPTIONS.find(opt => opt.value === (b.close_rate || 'medium'))?.percentage || 50;
      if (aCloseRate !== bCloseRate) return bCloseRate - aCloseRate;
      
      // 2. ‰∏ãÊ¨°ËøΩËπ§Êó•ÊúüÊéíÂ∫èÔºàËøëÁöÑÂú®ÂâçÔºâ
      const aNext = new Date(a.next_followup_date || '9999-12-31');
      const bNext = new Date(b.next_followup_date || '9999-12-31');
      if (aNext.getTime() !== bNext.getTime()) return aNext.getTime() - bNext.getTime();
      
      // 3. È†ê‰º∞ÈáëÈ°çÊéíÂ∫èÔºàÂ§ßÁöÑÂú®ÂâçÔºâ
      const aAmount = parseFloat(a.estimated_amount || 0);
      const bAmount = parseFloat(b.estimated_amount || 0);
      return bAmount - aAmount;
    });
  };

  // Ë®àÁÆóÂÄíÊï∏Â§©Êï∏
  const getDaysUntil = (dateString) => {
    if (!dateString) return null;
    const targetDate = new Date(dateString);
    const today = new Date();
    const diffTime = targetDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  // Áç≤ÂèñÊàê‰∫§ÁéáÊ®ôÁ±§Ê®£Âºè
  const getCloseRateStyle = (closeRate) => {
    const option = CLOSE_RATE_OPTIONS.find(opt => opt.value === closeRate);
    return option ? { backgroundColor: option.color, color: 'white' } : {};
  };

  // ËôïÁêÜÂçîÂä©Ë´ãÊ±Ç
  const handleAssistanceRequest = async (e) => {
    e.preventDefault();
    
    if (!selectedProspect) {
      alert('Ë´ãÂÖàÈÅ∏ÊìáÊ°à‰ª∂');
      return;
    }
    
    try {
      const { error } = await supabase
        .from('assistance_requests')
        .insert([{
          prospect_id: selectedProspect.id,
          requester_id: user.id,
          type: assistanceForm.type,
          priority: assistanceForm.priority,
          description: assistanceForm.description,
          deadline: assistanceForm.deadline || null,
          status: 'pending'
        }]);
      
      if (error) throw error;
      
      // ÈáçÁΩÆË°®ÂñÆ
      setAssistanceForm({
        type: 'review_quote',
        priority: 'medium',
        description: '',
        deadline: ''
      });
      
      setShowAssistanceModal(false);
      alert('ÂçîÂä©Ë´ãÊ±ÇÂ∑≤ÁôºÈÄÅÔºÅ‰∏ªÁÆ°ÊúÉÊî∂Âà∞ÈÄöÁü•„ÄÇ');
      
    } catch (error) {
      console.error('Error creating assistance request:', error);
      alert('ÁôºÈÄÅÂçîÂä©Ë´ãÊ±ÇÂ§±ÊïóÔºö' + error.message);
    }
  };

  // Áç≤ÂèñÂÖ±‰∫´Ê™îÊ°à
  const fetchSharedFiles = async (prospectId) => {
    try {
      const { data, error } = await supabase
        .from('shared_files')
        .select(`
          *,
          uploader:users!uploader_id(name)
        `)
        .eq('prospect_id', prospectId)
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      setSharedFiles(data || []);
    } catch (error) {
      console.error('Error fetching shared files:', error);
      setSharedFiles([]);
    }
  };

  // ËôïÁêÜÊ™îÊ°à‰∏äÂÇ≥
  const handleFileUpload = async (event, prospectId) => {
    const file = event.target.files[0];
    if (!file) return;

    setUploadingFile(true);

    try {
      // ‰∏äÂÇ≥Ê™îÊ°àÂà∞ Supabase Storage
      const fileExt = file.name.split('.').pop();
      const fileName = `${prospectId}_${Date.now()}.${fileExt}`;
      const filePath = `shared-files/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('files')
        .upload(filePath, file);

      if (uploadError) throw uploadError;

      // Áç≤ÂèñÊ™îÊ°àÁöÑÂÖ¨Èñã URL
      const { data: urlData } = supabase.storage
        .from('files')
        .getPublicUrl(filePath);

      // ÂÑ≤Â≠òÊ™îÊ°àË≥áË®äÂà∞Ë≥áÊñôÂ∫´
      const { error: dbError } = await supabase
        .from('shared_files')
        .insert([{
          prospect_id: prospectId,
          uploader_id: user.id,
          file_name: file.name,
          file_path: filePath,
          file_url: urlData.publicUrl,
          file_size: file.size,
          mime_type: file.type
        }]);

      if (dbError) throw dbError;

      // ÈáçÊñ∞ËºâÂÖ•Ê™îÊ°àÂàóË°®
      fetchSharedFiles(prospectId);
      alert('Ê™îÊ°à‰∏äÂÇ≥ÊàêÂäüÔºÅ');
      
      // Ê∏ÖÁ©∫Ê™îÊ°àËº∏ÂÖ•
      event.target.value = '';
      
    } catch (error) {
      console.error('Error uploading file:', error);
      alert('Ê™îÊ°à‰∏äÂÇ≥Â§±ÊïóÔºö' + error.message);
    } finally {
      setUploadingFile(false);
    }
  };

  // ‰∏ãËºâÊ™îÊ°àÂà∞LINE (ÂØ¶Èöõ‰∏äÊòØ‰∏ãËºâÂà∞ÁÄèË¶ΩÂô®)
  const handleDownloadToLine = (file) => {
    // ÂâµÂª∫‰∏ãËºâÈÄ£Áµê
    const link = document.createElement('a');
    link.href = file.file_url;
    link.download = file.file_name;
    link.target = '_blank';
    
    // Ëß∏Áôº‰∏ãËºâ
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // È°ØÁ§∫ÊèêÁ§∫Ë®äÊÅØ
    alert(`Ê™îÊ°à "${file.file_name}" Â∑≤ÈñãÂßã‰∏ãËºâÔºÅ\n‰∏ãËºâÂÆåÊàêÂæåÔºåÊÇ®ÂèØ‰ª•Áõ¥Êé•ÂàÜ‰∫´Âà∞LINEÁæ§ÁµÑ„ÄÇ`);
  };

  // Âà™Èô§ÂÖ±‰∫´Ê™îÊ°à
  const handleDeleteFile = async (fileId, filePath) => {
    if (!confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂÄãÊ™îÊ°àÂóéÔºü')) return;
    
    try {
      // Âæû Storage Âà™Èô§Ê™îÊ°à
      const { error: storageError } = await supabase.storage
        .from('files')
        .remove([filePath]);
      
      if (storageError) throw storageError;
      
      // ÂæûË≥áÊñôÂ∫´Âà™Èô§Ë®òÈåÑ
      const { error: dbError } = await supabase
        .from('shared_files')
        .delete()
        .eq('id', fileId);
      
      if (dbError) throw dbError;
      
      // ÈáçÊñ∞ËºâÂÖ•Ê™îÊ°àÂàóË°®
      fetchSharedFiles(selectedProspect.id);
      alert('Ê™îÊ°àÂ∑≤Âà™Èô§');
      
    } catch (error) {
      console.error('Error deleting file:', error);
      alert('Âà™Èô§Ê™îÊ°àÂ§±ÊïóÔºö' + error.message);
    }
  };

  // Áç≤ÂèñË°åÂãïË®òÈåÑ
  const fetchActionRecords = async (prospectId) => {
    try {
      const { data, error } = await supabase
        .from('action_records')
        .select(`
          *,
          user:users!user_id(name)
        `)
        .eq('prospect_id', prospectId)
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      setActionRecords(data || []);
    } catch (error) {
      console.error('Error fetching action records:', error);
      setActionRecords([]);
    }
  };

  // ËôïÁêÜÊñ∞Â¢ûË°åÂãïË®òÈåÑ
  const handleAddAction = async (e) => {
    e.preventDefault();
    
    if (!selectedProspect) {
      alert('Ë´ãÂÖàÈÅ∏ÊìáÊ°à‰ª∂');
      return;
    }
    
    try {
      const { error } = await supabase
        .from('action_records')
        .insert([{
          prospect_id: selectedProspect.id,
          user_id: user.id,
          action_type: actionForm.action_type,
          content: actionForm.content,
          next_followup_date: actionForm.next_followup_date || null,
          attachments: actionForm.attachments
        }]);
      
      if (error) throw error;
      
      // Â¶ÇÊûúË®≠ÂÆö‰∫Ü‰∏ãÊ¨°ËøΩËπ§Êó•ÊúüÔºåÊõ¥Êñ∞Ê°à‰ª∂Ë≥áË®ä
      if (actionForm.next_followup_date) {
        const { error: updateError } = await supabase
          .from('prospects')
          .update({ 
            next_followup_date: actionForm.next_followup_date,
            updated_at: new Date().toISOString()
          })
          .eq('id', selectedProspect.id);
        
        if (updateError) throw updateError;
      }
      
      // ÈáçÁΩÆË°®ÂñÆ
      setActionForm({
        action_type: 'phone',
        content: '',
        next_followup_date: '',
        attachments: []
      });
      
      setShowActionModal(false);
      
      // ÈáçÊñ∞ËºâÂÖ•Êï∏Êìö
      fetchActionRecords(selectedProspect.id);
      fetchProspects();
      alert('Ë°åÂãïË®òÈåÑÂ∑≤Êñ∞Â¢ûÔºÅ');
      
    } catch (error) {
      console.error('Error adding action record:', error);
      alert('Êñ∞Â¢ûË°åÂãïË®òÈåÑÂ§±ÊïóÔºö' + error.message);
    }
  };

  // ËôïÁêÜË°åÂãïË®òÈåÑÁöÑÊ™îÊ°à‰∏äÂÇ≥
  const handleActionFileUpload = async (event) => {
    const files = Array.from(event.target.files);
    if (!files.length) return;

    const uploadedFiles = [];
    
    for (const file of files) {
      try {
        // ‰∏äÂÇ≥Ê™îÊ°àÂà∞ Supabase Storage
        const fileExt = file.name.split('.').pop();
        const fileName = `action_${selectedProspect.id}_${Date.now()}.${fileExt}`;
        const filePath = `action-files/${fileName}`;

        const { error: uploadError } = await supabase.storage
          .from('files')
          .upload(filePath, file);

        if (uploadError) throw uploadError;

        // Áç≤ÂèñÊ™îÊ°àÁöÑÂÖ¨Èñã URL
        const { data: urlData } = supabase.storage
          .from('files')
          .getPublicUrl(filePath);

        uploadedFiles.push({
          name: file.name,
          path: filePath,
          url: urlData.publicUrl,
          size: file.size
        });
        
      } catch (error) {
        console.error('Error uploading file:', error);
        alert(`Ê™îÊ°à "${file.name}" ‰∏äÂÇ≥Â§±ÊïóÔºö${error.message}`);
      }
    }
    
    // Êõ¥Êñ∞Ë°®ÂñÆ‰∏≠ÁöÑÈôÑ‰ª∂
    setActionForm({
      ...actionForm,
      attachments: [...actionForm.attachments, ...uploadedFiles]
    });
    
    // Ê∏ÖÁ©∫Ê™îÊ°àËº∏ÂÖ•
    event.target.value = '';
  };

  // ÁßªÈô§Ë°åÂãïË®òÈåÑÁöÑÈôÑ‰ª∂
  const removeActionAttachment = (index) => {
    const newAttachments = [...actionForm.attachments];
    newAttachments.splice(index, 1);
    setActionForm({
      ...actionForm,
      attachments: newAttachments
    });
  };

  // Ë®àÁÆóÊèêÈÜíÈÄöÁü•
  const calculateNotifications = () => {
    const now = new Date();
    const notifications = [];

    prospects.forEach(prospect => {
      // Ë∑≥ÈÅéÂ∑≤Â§±ÂñÆÂíåÂ∑≤ËΩâÊèõÁöÑÊ°à‰ª∂
      if (['Â∑≤Â§±ÂñÆ', 'Â∑≤ËΩâÊèõ'].includes(prospect.stage)) return;

      // 1. ‰∏ãÊ¨°ËøΩËπ§Êó•ÊúüÂà∞ÊúüÊèêÈÜí
      if (prospect.next_followup_date) {
        const followupDate = new Date(prospect.next_followup_date);
        const daysDiff = Math.ceil((followupDate - now) / (1000 * 60 * 60 * 24));
        
        if (daysDiff <= 0) {
          notifications.push({
            id: `followup-${prospect.id}`,
            type: 'overdue',
            priority: 'high',
            title: 'ËøΩËπ§ÈÄæÊúü',
            message: `Ê°à‰ª∂„Äå${prospect.client_name} - ${prospect.project_name}„ÄçËøΩËπ§Â∑≤ÈÄæÊúü ${Math.abs(daysDiff)} Â§©`,
            prospect: prospect,
            daysOverdue: Math.abs(daysDiff)
          });
        } else if (daysDiff <= 1) {
          notifications.push({
            id: `followup-${prospect.id}`,
            type: 'due_soon',
            priority: 'medium',
            title: 'Âç≥Â∞áÂà∞Êúü',
            message: `Ê°à‰ª∂„Äå${prospect.client_name} - ${prospect.project_name}„Äç${daysDiff === 0 ? '‰ªäÂ§©' : 'ÊòéÂ§©'}ÈúÄË¶ÅËøΩËπ§`,
            prospect: prospect,
            daysLeft: daysDiff
          });
        }
      }

      // 2. Á∞ΩÁ¥ÑÊó•ÊúüÂâç7Â§©ÊèêÈÜí
      if (prospect.expected_sign_date) {
        const signDate = new Date(prospect.expected_sign_date);
        const daysDiff = Math.ceil((signDate - now) / (1000 * 60 * 60 * 24));
        
        if (daysDiff <= 7 && daysDiff > 0) {
          notifications.push({
            id: `sign-${prospect.id}`,
            type: 'contract_due',
            priority: 'high',
            title: 'Á∞ΩÁ¥ÑÊúüÈôêÊé•Ëøë',
            message: `Ê°à‰ª∂„Äå${prospect.client_name} - ${prospect.project_name}„ÄçÈ†êË®à ${daysDiff} Â§©ÂæåÁ∞ΩÁ¥Ñ`,
            prospect: prospect,
            daysLeft: daysDiff
          });
        } else if (daysDiff <= 0) {
          notifications.push({
            id: `sign-${prospect.id}`,
            type: 'contract_overdue',
            priority: 'urgent',
            title: 'Á∞ΩÁ¥ÑÂ∑≤ÈÄæÊúü',
            message: `Ê°à‰ª∂„Äå${prospect.client_name} - ${prospect.project_name}„ÄçÁ∞ΩÁ¥ÑÂ∑≤ÈÄæÊúü ${Math.abs(daysDiff)} Â§©`,
            prospect: prospect,
            daysOverdue: Math.abs(daysDiff)
          });
        }
      }

      // 3. 14Â§©Êú™Êõ¥Êñ∞ÈªÉÁâåÊèêÈÜí
      if (prospect.updated_at) {
        const updatedDate = new Date(prospect.updated_at);
        const daysDiff = Math.ceil((now - updatedDate) / (1000 * 60 * 60 * 24));
        
        if (daysDiff >= 14) {
          notifications.push({
            id: `inactive-${prospect.id}`,
            type: 'inactive',
            priority: daysDiff >= 30 ? 'urgent' : 'medium',
            title: daysDiff >= 30 ? 'Èï∑ÊúüÊú™Êõ¥Êñ∞' : 'Êú™Êõ¥Êñ∞ÊèêÈÜí',
            message: `Ê°à‰ª∂„Äå${prospect.client_name} - ${prospect.project_name}„ÄçÂ∑≤ ${daysDiff} Â§©Êú™Êõ¥Êñ∞`,
            prospect: prospect,
            daysInactive: daysDiff
          });
        }
      }

      // 4. È´òÂÉπÊ°àÂÑ™ÂÖàÊèêÈÜí
      const amount = parseFloat(prospect.estimated_amount || 0);
      const closeRate = CLOSE_RATE_OPTIONS.find(opt => opt.value === (prospect.close_rate || 'medium'))?.percentage || 50;
      
      if (amount >= 500000 && closeRate >= 70) {
        notifications.push({
          id: `priority-${prospect.id}`,
          type: 'priority',
          priority: 'high',
          title: 'ÂÑ™ÂÖàÊ°à‰ª∂',
          message: `È´òÂÉπÊ°à„Äå${prospect.client_name} - ${prospect.project_name}„Äç(NT$ ${amount.toLocaleString()}) Êàê‰∫§Áéá${closeRate}%ÔºåÂª∫Ë≠∞ÂÑ™ÂÖàË∑üÈÄ≤`,
          prospect: prospect,
          amount: amount,
          closeRate: closeRate
        });
      }
    });

    // ÊåâÂÑ™ÂÖàÁ¥öÊéíÂ∫è
    const priorityOrder = { 'urgent': 0, 'high': 1, 'medium': 2, 'low': 3 };
    notifications.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);

    setNotifications(notifications);
  };

  // Áç≤ÂèñÊèêÈÜíÂúñÁ§∫
  const getNotificationIcon = (type) => {
    switch(type) {
      case 'overdue': return '‚ö†Ô∏è';
      case 'due_soon': return 'üìÖ';
      case 'contract_due': return '‚úçÔ∏è';
      case 'contract_overdue': return 'üö®';
      case 'inactive': return 'üí§';
      case 'priority': return '‚≠ê';
      default: return 'üì¢';
    }
  };

  // Áç≤ÂèñÊèêÈÜíÈ°èËâ≤
  const getNotificationColor = (priority) => {
    switch(priority) {
      case 'urgent': return '#ef4444';
      case 'high': return '#f59e0b';
      case 'medium': return '#6366f1';
      case 'low': return '#6b7280';
      default: return '#6b7280';
    }
  };

  // Activities ËôïÁêÜÂáΩÊï∏
  const handleCompleteActivity = async (activityId) => {
    try {
      await updateActivity(activityId, {
        result: 'completed',
        done_at: new Date().toISOString()
      });
      alert('‰ªªÂãôÂ∑≤ÂÆåÊàêÔºÅ');
    } catch (error) {
      alert('ÂÆåÊàê‰ªªÂãôÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleRescheduleActivity = async (activityId, newDate) => {
    try {
      await updateActivity(activityId, {
        due_at: newDate
      });
      alert('‰ªªÂãôÂ∑≤ÊîπÊúüÔºÅ');
    } catch (error) {
      alert('ÊîπÊúüÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleSelectActivity = (activityId, isSelected) => {
    if (isSelected) {
      setSelectedActivities(prev => [...prev, activityId]);
    } else {
      setSelectedActivities(prev => prev.filter(id => id !== activityId));
    }
  };

  const handleBulkComplete = async () => {
    if (selectedActivities.length === 0) return;
    
    try {
      await batchUpdateActivities(selectedActivities, 'complete');
      setSelectedActivities([]);
      alert(`Â∑≤ÂÆåÊàê ${selectedActivities.length} ÂÄã‰ªªÂãôÔºÅ`);
    } catch (error) {
      alert('ÊâπÊ¨°ÂÆåÊàêÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleBulkReschedule = async () => {
    if (selectedActivities.length === 0) return;
    
    const newDate = prompt('Ë´ãËº∏ÂÖ•Êñ∞ÁöÑÂà∞ÊúüÊó•Êúü (YYYY-MM-DD):');
    if (!newDate) return;
    
    try {
      await batchUpdateActivities(selectedActivities, 'reschedule', {
        due_at: newDate
      });
      setSelectedActivities([]);
      alert(`Â∑≤ÊîπÊúü ${selectedActivities.length} ÂÄã‰ªªÂãôÔºÅ`);
    } catch (error) {
      alert('ÊâπÊ¨°ÊîπÊúüÂ§±ÊïóÔºö' + error.message);
    }
  };

  // Prospects ÊâπÊ¨°Êìç‰ΩúËôïÁêÜÂáΩÊï∏
  const handleSelectProspect = (prospectId, isSelected) => {
    if (isSelected) {
      setSelectedProspects(prev => [...prev, prospectId]);
    } else {
      setSelectedProspects(prev => prev.filter(id => id !== prospectId));
    }
  };

  const handleBulkAssign = async () => {
    if (selectedProspects.length === 0) return;
    
    const selectedUser = prompt(`ÈÅ∏ÊìáË¶ÅÊåáÊ¥æÁöÑÊ•≠Âãô‰∫∫Âì°:\n${users.map((user, i) => `${i + 1}. ${user.name}`).join('\n')}\n\nË´ãËº∏ÂÖ•Á∑®Ëôü:`);
    if (!selectedUser) return;
    
    const userIndex = parseInt(selectedUser) - 1;
    if (userIndex < 0 || userIndex >= users.length) {
      alert('ÁÑ°ÊïàÁöÑÈÅ∏È†Ö');
      return;
    }
    
    try {
      const updates = selectedProspects.map(id => 
        supabase
          .from('prospects')
          .update({ 
            owner_id: users[userIndex].id,
            updated_at: new Date().toISOString()
          })
          .eq('id', id)
      );
      
      await Promise.all(updates);
      setSelectedProspects([]);
      fetchProspects();
      alert(`Â∑≤ÊåáÊ¥æ ${selectedProspects.length} ÂÄãÊ°à‰ª∂Áµ¶ ${users[userIndex].name}ÔºÅ`);
    } catch (error) {
      alert('ÊâπÊ¨°ÊåáÊ¥æÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleBulkCloseRateUpdate = async () => {
    if (selectedProspects.length === 0) return;
    
    const options = CLOSE_RATE_OPTIONS.map((opt, i) => `${i + 1}. ${opt.label} (${opt.percentage}%)`).join('\n');
    const selection = prompt(`ÈÅ∏ÊìáÊñ∞ÁöÑÊàê‰∫§Áéá:\n${options}\n\nË´ãËº∏ÂÖ•Á∑®Ëôü:`);
    if (!selection) return;
    
    const optionIndex = parseInt(selection) - 1;
    if (optionIndex < 0 || optionIndex >= CLOSE_RATE_OPTIONS.length) {
      alert('ÁÑ°ÊïàÁöÑÈÅ∏È†Ö');
      return;
    }
    
    try {
      const updates = selectedProspects.map(id => 
        supabase
          .from('prospects')
          .update({ 
            close_rate: CLOSE_RATE_OPTIONS[optionIndex].value,
            updated_at: new Date().toISOString()
          })
          .eq('id', id)
      );
      
      await Promise.all(updates);
      setSelectedProspects([]);
      fetchProspects();
      alert(`Â∑≤Êõ¥Êñ∞ ${selectedProspects.length} ÂÄãÊ°à‰ª∂ÁöÑÊàê‰∫§ÁéáÁÇ∫Ôºö${CLOSE_RATE_OPTIONS[optionIndex].label}ÔºÅ`);
    } catch (error) {
      alert('ÊâπÊ¨°Êõ¥Êñ∞Êàê‰∫§ÁéáÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleBulkFollowupUpdate = async () => {
    if (selectedProspects.length === 0) return;
    
    // Âø´ÈÄüÊó•ÊúüÈÅ∏È†Ö (ËàáÂñÆÂÄãÊ°à‰ª∂Áõ∏Âêå)
    const quickDateOptions = [
      { label: '‰ªäÂ§©', days: 0 },
      { label: 'ÊòéÂ§©', days: 1 },
      { label: '3Â§©Âæå', days: 3 },
      { label: '1ÈÄ±Âæå', days: 7 },
      { label: '2ÈÄ±Âæå', days: 14 },
      { label: '1ÂÄãÊúàÂæå', days: 30 }
    ];
    
    const today = new Date();
    const options = quickDateOptions.map((option, index) => {
      const date = new Date(today);
      date.setDate(date.getDate() + option.days);
      return `${index + 1}. ${option.label} (${date.getMonth() + 1}/${date.getDate()})`;
    }).join('\n');
    
    const choice = prompt(
      `ÊâπÊ¨°Ë®≠ÂÆöËøΩËπ§Êó•Êúü (${selectedProspects.length} ÂÄãÊ°à‰ª∂):\n\n${options}\n7. Ëá™ÂÆöÁæ©Êó•Êúü\n\nË´ãËº∏ÂÖ•Á∑®Ëôü:`
    );
    
    if (!choice) return;
    
    let newDate;
    const choiceNum = parseInt(choice);
    
    if (choiceNum >= 1 && choiceNum <= 6) {
      // ‰ΩøÁî®Âø´ÈÄüÈÅ∏È†Ö
      const selectedOption = quickDateOptions[choiceNum - 1];
      const date = new Date(today);
      date.setDate(date.getDate() + selectedOption.days);
      newDate = date.toISOString().split('T')[0];
    } else if (choiceNum === 7) {
      // Ëá™ÂÆöÁæ©Êó•Êúü
      newDate = prompt('Ë´ãËº∏ÂÖ•ËøΩËπ§Êó•Êúü (YYYY-MM-DD):');
      if (!newDate) return;
    } else {
      alert('ÁÑ°ÊïàÁöÑÈÅ∏È†Ö');
      return;
    }
    
    try {
      const updates = selectedProspects.map(id => 
        supabase
          .from('prospects')
          .update({ 
            next_followup_date: newDate,
            updated_at: new Date().toISOString()
          })
          .eq('id', id)
      );
      
      await Promise.all(updates);
      setSelectedProspects([]);
      fetchProspects();
      
      // ÂèãÂñÑÁöÑÁ¢∫Ë™çË®äÊÅØ
      const selectedDate = new Date(newDate);
      const dateStr = `${selectedDate.getMonth() + 1}Êúà${selectedDate.getDate()}Êó•`;
      alert(`‚úÖ Â∑≤Êõ¥Êñ∞ ${selectedProspects.length} ÂÄãÊ°à‰ª∂ÁöÑËøΩËπ§Êó•ÊúüÁÇ∫Ôºö${dateStr}ÔºÅ`);
    } catch (error) {
      alert('ÊâπÊ¨°Êõ¥Êñ∞ËøΩËπ§Êó•ÊúüÂ§±ÊïóÔºö' + error.message);
    }
  };

  // Ëß∏ÊéßÊªëÂãïËôïÁêÜÂáΩÊï∏
  const handleTouchStart = (e, itemId) => {
    const touch = e.touches[0];
    setSwipeState({
      startX: touch.clientX,
      startY: touch.clientY,
      currentX: touch.clientX,
      isSwiping: false,
      swipedItem: itemId
    });
  };

  const handleTouchMove = (e, itemId) => {
    if (swipeState.swipedItem !== itemId) return;
    
    const touch = e.touches[0];
    const deltaX = touch.clientX - swipeState.startX;
    const deltaY = touch.clientY - swipeState.startY;
    
    // Âà§Êñ∑ÊòØÂê¶ÁÇ∫Ê∞¥Âπ≥ÊªëÂãï
    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 10) {
      e.preventDefault();
      setSwipeState(prev => ({
        ...prev,
        currentX: touch.clientX,
        isSwiping: true
      }));
    }
  };

  const handleTouchEnd = (e, itemId, itemType = 'prospect') => {
    if (swipeState.swipedItem !== itemId) return;
    
    const deltaX = swipeState.currentX - swipeState.startX;
    
    // Â∑¶ÊªëË∂ÖÈÅé100pxËß∏ÁôºÂãï‰Ωú
    if (deltaX < -100) {
      if (itemType === 'prospect') {
        const prospect = prospects.find(p => p.id === itemId);
        if (prospect) {
          // È°ØÁ§∫Âø´ÈÄüÂãï‰ΩúÈÅ∏ÂñÆ
          showQuickActionMenu(prospect);
        }
      }
    }
    
    // ÈáçÁΩÆÊªëÂãïÁãÄÊÖã
    setSwipeState({
      startX: 0,
      startY: 0,
      currentX: 0,
      isSwiping: false,
      swipedItem: null
    });
  };

  const showQuickActionMenu = (prospect) => {
    const actions = [
      '1. üìû ÈõªË©±ËÅØÁµ°',
      '2. üìÖ ÊîπËøΩËπ§Êó•Êúü',
      '3. üìä Ë™øÊàê‰∫§Áéá',
      '4. üë§ ÈáçÊñ∞ÊåáÊ¥æ',
      '5. ÂèñÊ∂à'
    ].join('\n');
    
    const choice = prompt(`Âø´ÈÄüÂãï‰ΩúÈÅ∏ÂñÆ - ${prospect.client_name}:\n\n${actions}\n\nË´ãËº∏ÂÖ•Á∑®Ëôü:`);
    
    switch(choice) {
      case '1':
        setSelectedProspect(prospect);
        setShowActionModal(true);
        break;
      case '2':
        handleQuickFollowupUpdate(prospect);
        break;
      case '3':
        handleQuickCloseRateUpdate(prospect);
        break;
      case '4':
        handleBulkAssign(); // ÂèØ‰ª•ÊîπÁÇ∫ÂñÆÂÄãÊåáÊ¥æ
        break;
      default:
        break;
    }
  };

  // ÁµêÊ°àËôïÁêÜÂáΩÊï∏
  const handleClosingSubmit = async (e) => {
    e.preventDefault();
    
    if (!closingProspect) return;
    
    try {
      const finalStage = closingForm.result === 'won' ? 'Â∑≤ËΩâÊèõ' : 'Â∑≤Â§±ÂñÆ';
      
      // Êõ¥Êñ∞Ê°à‰ª∂ÁãÄÊÖã
      const { error } = await supabase
        .from('prospects')
        .update({
          stage: finalStage,
          // ÂèØ‰ª•Ê∑ªÂä†È°çÂ§ñÁöÑÁµêÊ°àÊ¨Ñ‰Ωç
          closing_reason: closingForm.reason,
          closing_date: closingForm.close_date,
          final_amount: closingForm.final_amount || closingProspect.estimated_amount,
          closing_notes: closingForm.notes,
          updated_at: new Date().toISOString()
        })
        .eq('id', closingProspect.id);
      
      if (error) throw error;
      
      // Ë®òÈåÑÁµêÊ°àÊ¥ªÂãï
      await supabase.from('prospect_activities').insert({
        prospect_id: closingProspect.id,
        user_id: user?.id,
        activity_type: 'case_closed',
        old_value: closingProspect.stage,
        new_value: finalStage,
        description: `${finalStage}Ôºö${closingForm.reason}`
      });
      
      // Â¶ÇÊûúÊòØË¥èÂñÆÔºåÂèØ‰ª•ÈÅ∏ÊìáËΩâÊèõÁÇ∫Â∞àÊ°à
      if (closingForm.result === 'won') {
        const shouldConvert = confirm('ÊòØÂê¶Ë¶ÅÂ∞áÊ≠§Ê°à‰ª∂ËΩâÊèõÁÇ∫Ê≠£ÂºèÂ∞àÊ°àÔºü');
        if (shouldConvert) {
          await handleConvertToProject(closingProspect);
        }
      }
      
      // ÈáçÊñ∞ËºâÂÖ•Êï∏Êìö
      await fetchProspects();
      
      // ÈóúÈñâÂ∞çË©±Ê°Ü
      setShowClosingDialog(false);
      setClosingProspect(null);
      
      alert(`Ê°à‰ª∂Â∑≤${finalStage === 'Â∑≤ËΩâÊèõ' ? 'ÊàêÂäüÁµêÊ°à' : 'Ê®ôË®òÁÇ∫Â§±ÂñÆ'}ÔºÅ`);
      
    } catch (error) {
      console.error('Error closing prospect:', error);
      alert('ÁµêÊ°àÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleClosingCancel = () => {
    setShowClosingDialog(false);
    setClosingProspect(null);
    setClosingForm({
      result: 'won',
      reason: '',
      close_date: new Date().toISOString().split('T')[0],
      final_amount: '',
      notes: ''
    });
  };

  // Âø´ÈÄüÂãï‰ΩúËôïÁêÜÂáΩÊï∏
  const handleQuickFollowupUpdate = async (prospect) => {
    // Âø´ÈÄüÊó•ÊúüÈÅ∏È†Ö
    const quickDateOptions = [
      { label: '‰ªäÂ§©', days: 0 },
      { label: 'ÊòéÂ§©', days: 1 },
      { label: '3Â§©Âæå', days: 3 },
      { label: '1ÈÄ±Âæå', days: 7 },
      { label: '2ÈÄ±Âæå', days: 14 },
      { label: '1ÂÄãÊúàÂæå', days: 30 }
    ];
    
    const today = new Date();
    const options = quickDateOptions.map((option, index) => {
      const date = new Date(today);
      date.setDate(date.getDate() + option.days);
      return `${index + 1}. ${option.label} (${date.getMonth() + 1}/${date.getDate()})`;
    }).join('\n');
    
    const choice = prompt(
      `ÈÅ∏ÊìáËøΩËπ§Êó•Êúü - ${prospect.client_name}:\n\n${options}\n7. Ëá™ÂÆöÁæ©Êó•Êúü\n\nË´ãËº∏ÂÖ•Á∑®Ëôü:`
    );
    
    if (!choice) return;
    
    let newDate;
    const choiceNum = parseInt(choice);
    
    if (choiceNum >= 1 && choiceNum <= 6) {
      // ‰ΩøÁî®Âø´ÈÄüÈÅ∏È†Ö
      const selectedOption = quickDateOptions[choiceNum - 1];
      const date = new Date(today);
      date.setDate(date.getDate() + selectedOption.days);
      newDate = date.toISOString().split('T')[0];
    } else if (choiceNum === 7) {
      // Ëá™ÂÆöÁæ©Êó•Êúü
      const currentDate = prospect.next_followup_date ? 
        new Date(prospect.next_followup_date).toISOString().split('T')[0] : '';
      newDate = prompt('Ë´ãËº∏ÂÖ•ËøΩËπ§Êó•Êúü (YYYY-MM-DD):', currentDate);
      if (!newDate) return;
    } else {
      alert('ÁÑ°ÊïàÁöÑÈÅ∏È†Ö');
      return;
    }
    
    try {
      const { error } = await supabase
        .from('prospects')
        .update({ 
          next_followup_date: newDate,
          updated_at: new Date().toISOString()
        })
        .eq('id', prospect.id);
      
      if (error) throw error;
      
      fetchProspects(); // ÈáçÊñ∞ËºâÂÖ•Êï∏Êìö
      
      // ÂèãÂñÑÁöÑÁ¢∫Ë™çË®äÊÅØ
      const selectedDate = new Date(newDate);
      const dateStr = `${selectedDate.getMonth() + 1}Êúà${selectedDate.getDate()}Êó•`;
      alert(`‚úÖ ËøΩËπ§Êó•ÊúüÂ∑≤Ë®≠ÂÆöÁÇ∫Ôºö${dateStr}`);
    } catch (error) {
      console.error('Error updating followup date:', error);
      alert('Êõ¥Êñ∞ËøΩËπ§Êó•ÊúüÂ§±ÊïóÔºö' + error.message);
    }
  };

  const handleQuickCloseRateUpdate = async (prospect) => {
    const currentRate = prospect.close_rate || 'medium';
    const options = CLOSE_RATE_OPTIONS.map(opt => `${opt.value}: ${opt.label} (${opt.percentage}%)`).join('\n');
    
    const newRate = prompt(
      `ÁõÆÂâçÊàê‰∫§Áéá: ${CLOSE_RATE_OPTIONS.find(opt => opt.value === currentRate)?.label || '‰∏≠'}\n\nË´ãÈÅ∏ÊìáÊñ∞ÁöÑÊàê‰∫§Áéá:\n${options}\n\nË´ãËº∏ÂÖ•‰ª£Á¢º (high/medium/low):`
    );
    
    if (!newRate || !['high', 'medium', 'low'].includes(newRate)) {
      if (newRate !== null) alert('Ë´ãËº∏ÂÖ•ÊúâÊïàÁöÑÊàê‰∫§Áéá‰ª£Á¢ºÔºöhigh, medium, Êàñ low');
      return;
    }
    
    try {
      const { error } = await supabase
        .from('prospects')
        .update({ 
          close_rate: newRate,
          updated_at: new Date().toISOString()
        })
        .eq('id', prospect.id);
      
      if (error) throw error;
      
      fetchProspects(); // ÈáçÊñ∞ËºâÂÖ•Êï∏Êìö
      const selectedOption = CLOSE_RATE_OPTIONS.find(opt => opt.value === newRate);
      alert(`Êàê‰∫§ÁéáÂ∑≤Êõ¥Êñ∞ÁÇ∫Ôºö${selectedOption.label} (${selectedOption.percentage}%)`);
    } catch (error) {
      console.error('Error updating close rate:', error);
      alert('Êõ¥Êñ∞Êàê‰∫§ÁéáÂ§±ÊïóÔºö' + error.message);
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.pageHeader}>
        <h2>
          {viewMode === 'priority' ? 'Ê•≠ÂãôÊà∞ÊÉÖÂÆ§' : 
           viewMode === 'kanban' ? 'ÁÆ°ÈÅìÁúãÊùø' : 
           'ÊàëÁöÑ‰ªªÂãô'}
        </h2>
        
        {/* Ë¶ñÂúñÂàáÊèõÂô® */}
        <div className={styles.viewSwitcher}>
          <button 
            className={`${styles.viewButton} ${viewMode === 'priority' ? styles.active : ''}`}
            onClick={() => setViewMode('priority')}
          >
            üéØ Êà∞ÊÉÖÂÆ§
          </button>
          <button 
            className={`${styles.viewButton} ${viewMode === 'kanban' ? styles.active : ''}`}
            onClick={() => setViewMode('kanban')}
          >
            üìã ÁÆ°ÈÅìÁúãÊùø
          </button>
          <button 
            className={`${styles.viewButton} ${viewMode === 'tasks' ? styles.active : ''}`}
            onClick={() => setViewMode('tasks')}
          >
            ‚úÖ ÊàëÁöÑ‰ªªÂãô
          </button>
        </div>
        
        <div className={styles.headerActions}>
          <div className={styles.statistics}>
            <div className={styles.statItem}>
              <span className={styles.statLabel}>Á∏ΩPipelineÂÉπÂÄº</span>
              <span className={styles.statValue}>
                NT$ {getPipelineValue().toLocaleString()}
              </span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statLabel}>È†ê‰º∞ÂàÜÊΩ§</span>
              <span className={styles.statValue}>
                NT$ {getEstimatedCommission().toLocaleString()}
              </span>
            </div>
          </div>
          
          {/* ÈÄöÁü•Èà¥Èê∫ */}
          <div className={styles.notificationButton}>
            <button
              className={`${styles.bellButton} ${notifications.length > 0 ? styles.hasNotifications : ''}`}
              onClick={() => setShowNotifications(!showNotifications)}
              title={`${notifications.length} ÂÄãÊèêÈÜí`}
            >
              üîî
              {notifications.length > 0 && (
                <span className={styles.notificationBadge}>
                  {notifications.length > 99 ? '99+' : notifications.length}
                </span>
              )}
            </button>
            
            {showNotifications && (
              <div className={styles.notificationDropdown}>
                <div className={styles.notificationHeader}>
                  <h3>ÊèêÈÜíÈÄöÁü•</h3>
                  <span className={styles.notificationCount}>
                    {notifications.length} ÂÄã
                  </span>
                </div>
                
                <div className={styles.notificationList}>
                  {notifications.length === 0 ? (
                    <div className={styles.noNotifications}>
                      <p>üéâ ÁõÆÂâçÊ≤íÊúâÊèêÈÜí</p>
                      <p>ÊâÄÊúâÊ°à‰ª∂ÁãÄÊ≥ÅËâØÂ•Ω</p>
                    </div>
                  ) : (
                    notifications.slice(0, 10).map(notification => (
                      <div 
                        key={notification.id} 
                        className={styles.notificationItem}
                        onClick={() => {
                          setSelectedProspect(notification.prospect);
                          setShowNotifications(false);
                        }}
                      >
                        <div className={styles.notificationIcon}>
                          {getNotificationIcon(notification.type)}
                        </div>
                        <div className={styles.notificationContent}>
                          <div className={styles.notificationTitle}>
                            {notification.title}
                          </div>
                          <div className={styles.notificationMessage}>
                            {notification.message}
                          </div>
                        </div>
                        <div 
                          className={styles.priorityIndicator}
                          style={{ backgroundColor: getNotificationColor(notification.priority) }}
                        />
                      </div>
                    ))
                  )}
                </div>
                
                {notifications.length > 10 && (
                  <div className={styles.notificationFooter}>
                    ÈÇÑÊúâ {notifications.length - 10} ÂÄãÊèêÈÜí...
                  </div>
                )}
              </div>
            )}
          </div>
          
          <button 
            className={styles.exportButton}
            onClick={() => exportProspectsToExcel(prospects)}
          >
            üì• ÂåØÂá∫Excel
          </button>
          <button 
            className={styles.exportButton}
            onClick={() => exportProspectReportToPDF(statistics, prospects)}
          >
            üìÑ ÂåØÂá∫PDF
          </button>
          <button 
            className={styles.addButton}
            onClick={() => {
              resetForm();
              setShowModal(true);
            }}
          >
            + Êñ∞Â¢ûÊ¥ΩË´áÊ°à
          </button>
        </div>
      </div>

      {/* ÁØ©ÈÅ∏Âô® */}
      <div className={styles.filtersContainer}>
        <div className={styles.filterGroup}>
          <label>Êàê‰∫§Áéá</label>
          <select 
            value={filters.closeRate} 
            onChange={(e) => setFilters({...filters, closeRate: e.target.value})}
          >
            <option value="">ÂÖ®ÈÉ®</option>
            {CLOSE_RATE_OPTIONS.map(opt => (
              <option key={opt.value} value={opt.value}>{opt.label}</option>
            ))}
          </select>
        </div>
        <div className={styles.filterGroup}>
          <label>È†êÁÆóÁãÄÊÖã</label>
          <select 
            value={filters.budgetStatus} 
            onChange={(e) => setFilters({...filters, budgetStatus: e.target.value})}
          >
            <option value="">ÂÖ®ÈÉ®</option>
            {BUDGET_STATUS_OPTIONS.map(opt => (
              <option key={opt.value} value={opt.value}>{opt.label}</option>
            ))}
          </select>
        </div>
        <div className={styles.filterGroup}>
          <label>Ë≤†Ë≤¨‰∫∫</label>
          <select 
            value={filters.owner} 
            onChange={(e) => setFilters({...filters, owner: e.target.value})}
          >
            <option value="">ÂÖ®ÈÉ®</option>
            {users.map(user => (
              <option key={user.id} value={user.id}>{user.name}</option>
            ))}
          </select>
        </div>
        <div className={styles.filterGroup}>
          <label>Ê¥ΩË´áÈöéÊÆµ</label>
          <select 
            value={filters.stage} 
            onChange={(e) => setFilters({...filters, stage: e.target.value})}
          >
            <option value="">ÂÖ®ÈÉ®</option>
            {STAGES.filter(s => !['Â∑≤Â§±ÂñÆ', 'Â∑≤ËΩâÊèõ'].includes(s.id)).map(stage => (
              <option key={stage.id} value={stage.id}>{stage.label}</option>
            ))}
          </select>
        </div>
        <div className={styles.filterGroup}>
          <label>ÂÆ¢Êà∂‰æÜÊ∫ê</label>
          <input 
            type="text"
            placeholder="ÊêúÂ∞ã‰æÜÊ∫ê..."
            value={filters.source}
            onChange={(e) => setFilters({...filters, source: e.target.value})}
          />
        </div>
      </div>

      {/* Ê†πÊìöË¶ñÂúñÊ®°ÂºèÊ∏≤Êüì‰∏çÂêåÂÖßÂÆπ */}
      {viewMode === 'priority' && (
        /* Êà∞ÊÉÖÂÆ§‰∏âÂàÜÂçÄ‰ΩàÂ±Ä */
        <div className={styles.warRoomLayout}>
        {/* Â∑¶ÂÅ¥ÔºöÊ°à‰ª∂ÂàóË°® */}
        <div className={styles.leftPanel}>
          <div className={styles.panelHeader}>
            <h3>È´òÂÑ™ÂÖàÊ°à‰ª∂ÂàóË°®</h3>
            <span className={styles.count}>{getSortedProspects().length} Ê°à</span>
            {selectedProspects.length > 0 && (
              <div className={styles.batchActions}>
                <button 
                  onClick={handleBulkAssign}
                  className={styles.batchButton}
                >
                  üë§ ÊâπÊ¨°ÊåáÊ¥æ ({selectedProspects.length})
                </button>
                <button 
                  onClick={handleBulkCloseRateUpdate}
                  className={styles.batchButton}
                >
                  üìä Ë®≠Êàê‰∫§Áéá ({selectedProspects.length})
                </button>
                <button 
                  onClick={handleBulkFollowupUpdate}
                  className={styles.batchButton}
                >
                  üìÖ ÊâπÊ¨°ÊîπÊúü ({selectedProspects.length})
                </button>
              </div>
            )}
          </div>
          <div className={styles.prospectsList}>
            {getSortedProspects().map(prospect => {
              const signDays = getDaysUntil(prospect.expected_sign_date);
              const followupDays = getDaysUntil(prospect.next_followup_date);
              
              // Ë®àÁÆóË©≤Ê°à‰ª∂ÁöÑÊèêÈÜíÁãÄÊÖã
              const prospectNotifications = notifications.filter(n => n.prospect.id === prospect.id);
              const urgentNotification = prospectNotifications.find(n => n.priority === 'urgent');
              const highNotification = prospectNotifications.find(n => n.priority === 'high');
              const importantNotification = urgentNotification || highNotification;
              
              return (
                <div 
                  key={prospect.id} 
                  className={`${styles.prospectCard} ${selectedProspect?.id === prospect.id ? styles.selected : ''} ${importantNotification ? styles.hasAlert : ''}`}
                  onClick={() => setSelectedProspect(prospect)}
                  onTouchStart={(e) => handleTouchStart(e, prospect.id)}
                  onTouchMove={(e) => handleTouchMove(e, prospect.id)}
                  onTouchEnd={(e) => handleTouchEnd(e, prospect.id, 'prospect')}
                >
                  <div className={styles.prospectHeader}>
                    <div className={styles.prospectHeaderLeft}>
                      <input
                        type="checkbox"
                        className={styles.prospectCheckbox}
                        checked={selectedProspects.includes(prospect.id)}
                        onChange={(e) => {
                          e.stopPropagation();
                          handleSelectProspect(prospect.id, e.target.checked);
                        }}
                      />
                      <span 
                        className={styles.closeRateBadge}
                        style={getCloseRateStyle(prospect.close_rate || 'medium')}
                      >
                        {CLOSE_RATE_OPTIONS.find(opt => opt.value === (prospect.close_rate || 'medium'))?.label || '‰∏≠'}
                      </span>
                      {/* ÊèêÈÜíÊ®ôÁ§∫ */}
                      {importantNotification && (
                        <span 
                          className={styles.alertBadge}
                          style={{ backgroundColor: getNotificationColor(importantNotification.priority) }}
                          title={importantNotification.message}
                        >
                          {getNotificationIcon(importantNotification.type)}
                        </span>
                      )}
                    </div>
                    <span className={styles.amount}>
                      NT$ {parseFloat(prospect.estimated_amount || 0).toLocaleString()}
                    </span>
                  </div>
                  <h4 className={styles.prospectTitle}>
                    {prospect.client_name} - {prospect.project_name}
                  </h4>
                  <div className={styles.prospectMeta}>
                    <div className={styles.metaItem}>
                      <span className={styles.metaLabel}>Á∞ΩÁ¥ÑÊó•:</span>
                      <span className={`${styles.metaValue} ${signDays !== null && signDays <= 0 ? styles.overdue : signDays <= 7 ? styles.urgent : ''}`}>
                        {prospect.expected_sign_date 
                          ? `${new Date(prospect.expected_sign_date).toLocaleDateString()} ${signDays !== null ? `(${signDays > 0 ? signDays + 'Â§©Âæå' : Math.abs(signDays) + 'Â§©Ââç'})` : ''}`
                          : 'Êú™Ë®≠ÂÆö'
                        }
                      </span>
                    </div>
                    <div className={styles.metaItem}>
                      <span className={styles.metaLabel}>‰∏ãÊ¨°ËøΩËπ§:</span>
                      <span className={`${styles.metaValue} ${followupDays !== null && followupDays <= 0 ? styles.overdue : followupDays <= 1 ? styles.urgent : ''}`}>
                        {prospect.next_followup_date 
                          ? `${new Date(prospect.next_followup_date).toLocaleDateString()} ${followupDays !== null ? `(${followupDays > 0 ? followupDays + 'Â§©Âæå' : Math.abs(followupDays) + 'Â§©Ââç'})` : ''}`
                          : 'Êú™Ë®≠ÂÆö'
                        }
                      </span>
                    </div>
                  </div>
                  
                  {/* ÊèêÈÜíË©≥ÊÉÖ */}
                  {prospectNotifications.length > 0 && (
                    <div className={styles.prospectAlerts}>
                      {prospectNotifications.slice(0, 2).map(notification => (
                        <div 
                          key={notification.id}
                          className={styles.alertItem}
                          style={{ borderLeftColor: getNotificationColor(notification.priority) }}
                        >
                          <span className={styles.alertIcon}>
                            {getNotificationIcon(notification.type)}
                          </span>
                          <span className={styles.alertText}>
                            {notification.title}
                          </span>
                        </div>
                      ))}
                      {prospectNotifications.length > 2 && (
                        <div className={styles.alertMore}>
                          +{prospectNotifications.length - 2} ÂÄãÊèêÈÜí
                        </div>
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* Âè≥ÂÅ¥ÔºöË©≥ÊÉÖÂçÄÂíåË°åÂãïË®òÈåÑ */}
        <div className={styles.rightPanel}>
          {selectedProspect ? (
            <>
              {/* Âè≥‰∏äÔºöÊ°à‰ª∂Ë©≥ÊÉÖ */}
              <div className={styles.detailsPanel}>
                <div className={styles.panelHeader}>
                  <h3>Ê°à‰ª∂Ë©≥ÊÉÖ</h3>
                  <div className={styles.headerActions}>
                    <button 
                      className={styles.editButton}
                      onClick={() => openEditModal(selectedProspect)}
                    >
                      Á∑®ËºØ
                    </button>
                    <button 
                      className={styles.assistanceButton}
                      onClick={() => setShowAssistanceModal(true)}
                    >
                      @‰∏ªÁÆ°ÂçîÂä©
                    </button>
                    {selectedProspect.stage === 'ÂæÖÁ∞ΩÁ¥Ñ' && (
                      <button 
                        className={styles.convertButton}
                        onClick={() => handleConvertToProject(selectedProspect)}
                      >
                        ËΩâÊèõÁÇ∫Â∞àÊ°à
                      </button>
                    )}
                  </div>
                </div>
                
                <div className={styles.detailsContent}>
                  <div className={styles.detailsSection}>
                    <h4>Âü∫Êú¨Ë≥áË®ä</h4>
                    <div className={styles.detailsGrid}>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>ÂÆ¢Êà∂ÂêçÁ®±:</span>
                        <span className={styles.detailValue}>{selectedProspect.client_name}</span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>Â∞àÊ°àÂêçÁ®±:</span>
                        <span className={styles.detailValue}>{selectedProspect.project_name}</span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>Êàê‰∫§Áéá:</span>
                        <span 
                          className={styles.detailBadge}
                          style={getCloseRateStyle(selectedProspect.close_rate || 'medium')}
                        >
                          {CLOSE_RATE_OPTIONS.find(opt => opt.value === (selectedProspect.close_rate || 'medium'))?.label || '‰∏≠'}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>È†êÁÆóÁãÄÊÖã:</span>
                        <span className={styles.detailValue}>
                          {BUDGET_STATUS_OPTIONS.find(opt => opt.value === (selectedProspect.budget_status || 'sufficient'))?.label || 'Á¨¶Âêà'}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>Ê¥ΩË´áÈöéÊÆµ:</span>
                        <span className={styles.detailValue}>
                          {STAGES.find(s => s.id === selectedProspect.stage)?.label || selectedProspect.stage}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>È†ê‰º∞ÈáëÈ°ç:</span>
                        <span className={styles.detailValue}>
                          NT$ {parseFloat(selectedProspect.estimated_amount || 0).toLocaleString()}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>Ë≤†Ë≤¨‰∫∫:</span>
                        <span className={styles.detailValue}>{selectedProspect.owner?.name || 'Êú™ÊåáÊ¥æ'}</span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>È†êË®àÁ∞ΩÁ¥ÑÊó•:</span>
                        <span className={styles.detailValue}>
                          {selectedProspect.expected_sign_date 
                            ? new Date(selectedProspect.expected_sign_date).toLocaleDateString()
                            : 'Êú™Ë®≠ÂÆö'
                          }
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className={styles.detailsSection}>
                    <h4>ÂàÜÊΩ§Ë≥áË®ä</h4>
                    <div className={styles.detailsGrid}>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>ÂàÜÊΩ§ÊñπÂºè:</span>
                        <span className={styles.detailValue}>
                          {selectedProspect.use_fixed_commission ? 'Âõ∫ÂÆöÊØî‰æã' : 'ÈöéÊ¢ØÂºè'}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>ÂàÜÊΩ§ÊØî‰æã:</span>
                        <span className={styles.detailValue}>{selectedProspect.commission_rate}%</span>
                      </div>
                    </div>
                  </div>

                  {/* Ê±∫Á≠ñÈèàË≥áË®ä */}
                  <div className={styles.detailsSection}>
                    <h4>Ê±∫Á≠ñÈèàË≥áË®ä</h4>
                    <div className={styles.detailsGrid}>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>Ê±∫Á≠ñËÄÖ:</span>
                        <span className={styles.detailValue}>
                          {selectedProspect.decision_maker_name || 'Êú™Ë®≠ÂÆö'}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>ËÅ∑‰Ωç:</span>
                        <span className={styles.detailValue}>
                          {selectedProspect.decision_maker_position || 'Êú™Ë®≠ÂÆö'}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>ËÅØÁµ°ÊñπÂºè:</span>
                        <span className={styles.detailValue}>
                          {selectedProspect.decision_maker_contact || 'Êú™Ë®≠ÂÆö'}
                        </span>
                      </div>
                      <div className={styles.detailItem}>
                        <span className={styles.detailLabel}>‰∏ãÊ¨°ËøΩËπ§:</span>
                        <span className={styles.detailValue}>
                          {selectedProspect.next_followup_date 
                            ? new Date(selectedProspect.next_followup_date).toLocaleDateString()
                            : 'Êú™Ë®≠ÂÆö'
                          }
                        </span>
                      </div>
                    </div>
                    
                    {selectedProspect.key_influencers && (
                      <div style={{ marginTop: '16px' }}>
                        <span className={styles.detailLabel}>ÈóúÈçµÂΩ±ÈüøËÄÖ:</span>
                        <div className={styles.noteContent} style={{ marginTop: '8px' }}>
                          {selectedProspect.key_influencers}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* ÈòªÂäõËàáÈúÄÊ±Ç */}
                  <div className={styles.detailsSection}>
                    <h4>ÈòªÂäõËàáÈúÄÊ±Ç</h4>
                    
                    {selectedProspect.main_pain_points && (
                      <div style={{ marginBottom: '16px' }}>
                        <span className={styles.detailLabel}>‰∏ªË¶ÅÁóõÈªû:</span>
                        <div className={styles.noteContent} style={{ marginTop: '8px' }}>
                          {selectedProspect.main_pain_points}
                        </div>
                      </div>
                    )}
                    
                    {selectedProspect.close_obstacles && (
                      <div style={{ marginBottom: '16px' }}>
                        <span className={styles.detailLabel}>Êàê‰∫§ÈòªÂäõ:</span>
                        <div className={styles.noteContent} style={{ marginTop: '8px' }}>
                          {selectedProspect.close_obstacles}
                        </div>
                      </div>
                    )}
                    
                    {selectedProspect.competitor_name && (
                      <div className={styles.detailsGrid}>
                        <div className={styles.detailItem}>
                          <span className={styles.detailLabel}>Á´∂Áà≠Â∞çÊâã:</span>
                          <span className={styles.detailValue}>{selectedProspect.competitor_name}</span>
                        </div>
                        <div className={styles.detailItem}>
                          <span className={styles.detailLabel}>Á´∂Áà≠ÁãÄÊÖã:</span>
                          <span className={styles.detailValue}>
                            {selectedProspect.competitor_status === 'none' ? 'ÁÑ°Á´∂Áà≠Â∞çÊâã' :
                             selectedProspect.competitor_status === 'leading' ? 'ÊàëÊñπÈ†òÂÖà' :
                             selectedProspect.competitor_status === 'competing' ? 'ÊøÄÁÉàÁ´∂Áà≠' :
                             selectedProspect.competitor_status === 'disadvantage' ? 'Â∞çÊñπÈ†òÂÖà' :
                             selectedProspect.competitor_status === 'unknown' ? 'ÁãÄÊÖã‰∏çÊòé' : 
                             selectedProspect.competitor_status}
                          </span>
                        </div>
                      </div>
                    )}
                  </div>

                  {selectedProspect.note && (
                    <div className={styles.detailsSection}>
                      <h4>ÂÇôË®ª</h4>
                      <div className={styles.noteContent}>
                        {selectedProspect.note}
                      </div>
                    </div>
                  )}

                  {/* Ê™îÊ°àÂàÜ‰∫´ÂçÄÂüü */}
                  <div className={styles.detailsSection}>
                    <h4>ÂÖ±‰∫´Ê™îÊ°à</h4>
                    
                    {/* Ê™îÊ°à‰∏äÂÇ≥ÂçÄ (‰∏ªÁÆ°Ê¨äÈôê) */}
                    {user && user.role === 'leader' && (
                      <div className={styles.fileUploadArea}>
                        <input
                          type="file"
                          id="fileUpload"
                          style={{ display: 'none' }}
                          onChange={(e) => handleFileUpload(e, selectedProspect.id)}
                          disabled={uploadingFile}
                          accept=".pdf,.doc,.docx,.xlsx,.jpg,.jpeg,.png"
                        />
                        <label htmlFor="fileUpload" className={styles.uploadButton}>
                          {uploadingFile ? '‰∏äÂÇ≥‰∏≠...' : 'üìÅ ‰∏äÂÇ≥Ê™îÊ°à'}
                        </label>
                        <span className={styles.uploadHint}>
                          ÊîØÊè¥Ê†ºÂºèÔºöPDF, DOC, DOCX, XLSX, JPG, PNG
                        </span>
                      </div>
                    )}
                    
                    {/* Ê™îÊ°àÂàóË°® */}
                    <div className={styles.filesList}>
                      {sharedFiles.length === 0 ? (
                        <div className={styles.emptyFiles}>
                          <p>Â∞öÁÑ°ÂÖ±‰∫´Ê™îÊ°à</p>
                        </div>
                      ) : (
                        sharedFiles.map(file => (
                          <div key={file.id} className={styles.fileItem}>
                            <div className={styles.fileIcon}>
                              {file.mime_type?.startsWith('image/') ? 'üñºÔ∏è' : 
                               file.mime_type?.includes('pdf') ? 'üìÑ' : 
                               file.mime_type?.includes('excel') || file.mime_type?.includes('spreadsheet') ? 'üìä' : 
                               file.mime_type?.includes('word') || file.mime_type?.includes('document') ? 'üìù' : 
                               'üìé'}
                            </div>
                            <div className={styles.fileInfo}>
                              <div className={styles.fileName}>{file.file_name}</div>
                              <div className={styles.fileDetails}>
                                ‰∏äÂÇ≥ËÄÖ: {file.uploader?.name} | 
                                Â§ßÂ∞è: {Math.round(file.file_size / 1024)}KB | 
                                {new Date(file.created_at).toLocaleDateString()}
                              </div>
                            </div>
                            <div className={styles.fileActions}>
                              <button
                                className={styles.downloadToLineButton}
                                onClick={() => handleDownloadToLine(file)}
                                title="‰∏ãËºâÂà∞LINE"
                              >
                                üí¨ ‰∏ãËºâÂà∞LINE
                              </button>
                              {user && (user.role === 'leader' || user.id === file.uploader_id) && (
                                <button
                                  className={styles.deleteFileButton}
                                  onClick={() => handleDeleteFile(file.id, file.file_path)}
                                  title="Âà™Èô§Ê™îÊ°à"
                                >
                                  üóëÔ∏è
                                </button>
                              )}
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  </div>
                </div>
              </div>

              {/* Âè≥‰∏ãÔºöË°åÂãïËøΩËπ§ */}
              <div className={styles.actionsPanel}>
                <div className={styles.panelHeader}>
                  <h3>Ë°åÂãïËøΩËπ§Ë®òÈåÑ</h3>
                  <button 
                    className={styles.addActionButton}
                    onClick={() => setShowActionModal(true)}
                  >
                    + Êñ∞Â¢ûË°åÂãï
                  </button>
                </div>
                
                <div className={styles.actionsTimeline}>
                  {/* Âª∫Á´ãÊ°à‰ª∂Ë®òÈåÑ */}
                  <div className={styles.timelineItem}>
                    <div className={styles.timelineIcon} style={{ backgroundColor: '#6b7280' }}>
                      ‚ûï
                    </div>
                    <div className={styles.timelineContent}>
                      <div className={styles.timelineHeader}>
                        <div className={styles.timelineAction}>Âª∫Á´ãÊ°à‰ª∂</div>
                        <div className={styles.timelineDate}>
                          {new Date(selectedProspect.created_at).toLocaleString()}
                        </div>
                      </div>
                      <div className={styles.timelineDescription}>
                        Ê°à‰ª∂„Äå{selectedProspect.project_name}„ÄçÂ∑≤Âª∫Á´ã
                      </div>
                      <div className={styles.timelineUser}>
                        Âª∫Á´ãËÄÖ: {selectedProspect.owner?.name}
                      </div>
                    </div>
                  </div>
                  
                  {/* Ë°åÂãïË®òÈåÑ */}
                  {actionRecords.map(record => {
                    const actionType = ACTION_TYPES.find(t => t.value === record.action_type) || ACTION_TYPES.find(t => t.value === 'other');
                    return (
                      <div key={record.id} className={styles.timelineItem}>
                        <div className={styles.timelineIcon} style={{ backgroundColor: actionType.color }}>
                          {actionType.icon}
                        </div>
                        <div className={styles.timelineContent}>
                          <div className={styles.timelineHeader}>
                            <div className={styles.timelineAction}>{actionType.label}</div>
                            <div className={styles.timelineDate}>
                              {new Date(record.created_at).toLocaleString()}
                            </div>
                          </div>
                          <div className={styles.timelineDescription}>{record.content}</div>
                          {record.next_followup_date && (
                            <div className={styles.timelineFollowup}>
                              üìÖ ‰∏ãÊ¨°ËøΩËπ§: {new Date(record.next_followup_date).toLocaleDateString()}
                            </div>
                          )}
                          {record.attachments && record.attachments.length > 0 && (
                            <div className={styles.timelineAttachments}>
                              {record.attachments.map((file, index) => (
                                <a
                                  key={index}
                                  href={file.url}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className={styles.attachmentLink}
                                >
                                  üìé {file.name}
                                </a>
                              ))}
                            </div>
                          )}
                          <div className={styles.timelineUser}>
                            Âü∑Ë°åËÄÖ: {record.user?.name}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                  
                  {actionRecords.length === 0 && (
                    <div className={styles.emptyTimeline}>
                      <p>Â∞öÁÑ°Ë°åÂãïË®òÈåÑ</p>
                      <p>ÈªûÊìä‰∏äÊñπ„Äå+ Êñ∞Â¢ûË°åÂãï„ÄçÈñãÂßãË®òÈåÑÊ•≠ÂãôÊ¥ªÂãï</p>
                    </div>
                  )}
                </div>
              </div>
            </>
          ) : (
            <div className={styles.emptySelection}>
              <h3>Ë´ãÈÅ∏ÊìáÂ∑¶ÂÅ¥Ê°à‰ª∂‰ª•Êü•ÁúãË©≥ÊÉÖ</h3>
              <p>ÈªûÊìäÂ∑¶ÂÅ¥Ê°à‰ª∂Âç°ÁâáÊü•ÁúãË©≥Á¥∞Ë≥áË®äÂíåË°åÂãïË®òÈåÑ</p>
            </div>
          )}
        </div>
      </div>
      )}

      {/* Kanban ÁúãÊùøË¶ñÂúñ */}
      {viewMode === 'kanban' && (
        <div className={styles.kanbanView}>
          <DragDropContext onDragEnd={handleDragEnd}>
            <div className={styles.kanbanBoard}>
              {STAGES.map(stage => (
                <div key={stage.id} className={styles.kanbanColumn}>
                  <div className={styles.columnHeader}>
                    <h3>{stage.label}</h3>
                    <span className={styles.columnCount}>
                      {getSortedProspects().filter(p => p.stage === stage.id).length}
                    </span>
                  </div>
                  <Droppable droppableId={stage.id}>
                    {(provided, snapshot) => (
                      <div
                        {...provided.droppableProps}
                        ref={provided.innerRef}
                        className={`${styles.columnCards} ${snapshot.isDraggingOver ? styles.dragover : ''}`}
                      >
                        {getSortedProspects()
                          .filter(prospect => prospect.stage === stage.id)
                          .map((prospect, index) => (
                            <Draggable 
                              key={prospect.id} 
                              draggableId={prospect.id.toString()} 
                              index={index}
                            >
                              {(provided, snapshot) => (
                                <div
                                  ref={provided.innerRef}
                                  {...provided.draggableProps}
                                  {...provided.dragHandleProps}
                                  className={`${styles.kanbanCard} ${snapshot.isDragging ? styles.dragging : ''}`}
                                  onClick={() => !snapshot.isDragging && setSelectedProspect(prospect)}
                                >
                                  <div className={styles.cardHeader}>
                                    <div className={styles.cardBadges}>
                                      <span className={`${styles.closeRateBadge} ${styles[`rate${prospect.close_rate}`]}`}>
                                        {CLOSE_RATE_OPTIONS.find(opt => opt.value === prospect.close_rate)?.label || '‰∏≠'}
                                      </span>
                                      {prospect.estimated_amount >= 500000 && prospect.close_rate === 'high' && (
                                        <span className={styles.priorityBadge}>‚≠ê</span>
                                      )}
                                    </div>
                                  </div>
                                  <div className={styles.cardTitle}>
                                    {prospect.client_name} - {prospect.project_name}
                                  </div>
                                  <div className={styles.cardAmount}>
                                    NT$ {parseInt(prospect.estimated_amount).toLocaleString()}
                                  </div>
                                  <div className={styles.cardMeta}>
                                    {prospect.next_followup_date && (
                                      <div className={styles.followupDate}>
                                        ËøΩËπ§: {new Date(prospect.next_followup_date).toLocaleDateString()}
                                      </div>
                                    )}
                                    {prospect.expected_sign_date && (
                                      <div className={styles.signDate}>
                                        Á∞ΩÁ¥Ñ: {new Date(prospect.expected_sign_date).toLocaleDateString()}
                                      </div>
                                    )}
                                  </div>
                                  <div className={styles.cardQuickActions}>
                                    <button 
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        setSelectedProspect(prospect);
                                        setShowActionModal(true);
                                      }}
                                      title="Âä†Ë°åÂãï"
                                    >
                                      +
                                    </button>
                                    <button 
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        handleQuickFollowupUpdate(prospect);
                                      }}
                                      title="ÊîπËøΩËπ§Êó•"
                                    >
                                      üìÖ
                                    </button>
                                    <button 
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        handleQuickCloseRateUpdate(prospect);
                                      }}
                                      title="Ë™øÊàê‰∫§Áéá"
                                    >
                                      üìä
                                    </button>
                                  </div>
                                </div>
                              )}
                            </Draggable>
                          ))}
                        {provided.placeholder}
                      </div>
                    )}
                  </Droppable>
                </div>
              ))}
            </div>
          </DragDropContext>
        </div>
      )}

      {/* ÊàëÁöÑ‰ªªÂãôË¶ñÂúñ */}
      {viewMode === 'tasks' && (
        <div className={styles.tasksView}>
          <div className={styles.tasksContainer}>
            <div className={styles.tasksHeader}>
              <h3>ÊàëÁöÑ‰ªªÂãôÊ∏ÖÂñÆ</h3>
              <div className={styles.tasksActions}>
                <button 
                  className={styles.refreshButton}
                  onClick={() => fetchActivities()}
                  disabled={loadingActivities}
                >
                  {loadingActivities ? 'ËºâÂÖ•‰∏≠...' : 'üîÑ ÈáçÊñ∞Êï¥ÁêÜ'}
                </button>
                {selectedActivities.length > 0 && (
                  <div className={styles.bulkActions}>
                    <button 
                      onClick={() => handleBulkComplete()}
                      className={styles.bulkButton}
                    >
                      ‚úÖ ÊâπÊ¨°ÂÆåÊàê ({selectedActivities.length})
                    </button>
                    <button 
                      onClick={() => handleBulkReschedule()}
                      className={styles.bulkButton}
                    >
                      üìÖ ÊâπÊ¨°ÊîπÊúü ({selectedActivities.length})
                    </button>
                  </div>
                )}
              </div>
            </div>

            {loadingActivities ? (
              <div className={styles.loadingActivities}>
                <p>ËºâÂÖ•‰ªªÂãô‰∏≠...</p>
              </div>
            ) : (
              <div className={styles.taskGroups}>
                {/* ÈÄæÊúü‰ªªÂãô */}
                {groupedActivities.overdue.length > 0 && (
                  <div className={styles.taskGroup}>
                    <div className={styles.taskGroupHeader}>
                      <h4 className={styles.overdueHeader}>
                        ‚ö†Ô∏è ÈÄæÊúü ({groupedActivities.overdue.length})
                      </h4>
                    </div>
                    <div className={styles.taskList}>
                      {groupedActivities.overdue.map(activity => (
                        <TaskItem
                          key={activity.activity_id}
                          activity={activity}
                          onComplete={handleCompleteActivity}
                          onReschedule={handleRescheduleActivity}
                          onSelect={handleSelectActivity}
                          isSelected={selectedActivities.includes(activity.activity_id)}
                        />
                      ))}
                    </div>
                  </div>
                )}

                {/* ‰ªäÂ§©ÁöÑ‰ªªÂãô */}
                {groupedActivities.today.length > 0 && (
                  <div className={styles.taskGroup}>
                    <div className={styles.taskGroupHeader}>
                      <h4 className={styles.todayHeader}>
                        üìÖ ‰ªäÂ§© ({groupedActivities.today.length})
                      </h4>
                    </div>
                    <div className={styles.taskList}>
                      {groupedActivities.today.map(activity => (
                        <TaskItem
                          key={activity.activity_id}
                          activity={activity}
                          onComplete={handleCompleteActivity}
                          onReschedule={handleRescheduleActivity}
                          onSelect={handleSelectActivity}
                          isSelected={selectedActivities.includes(activity.activity_id)}
                        />
                      ))}
                    </div>
                  </div>
                )}

                {/* Âç≥Â∞áÂà∞‰æÜÁöÑ‰ªªÂãô */}
                {groupedActivities.soon.length > 0 && (
                  <div className={styles.taskGroup}>
                    <div className={styles.taskGroupHeader}>
                      <h4 className={styles.soonHeader}>
                        üîú Âç≥Â∞áÂà∞‰æÜÔºà7Â§©ÂÖßÔºâ({groupedActivities.soon.length})
                      </h4>
                    </div>
                    <div className={styles.taskList}>
                      {groupedActivities.soon.map(activity => (
                        <TaskItem
                          key={activity.activity_id}
                          activity={activity}
                          onComplete={handleCompleteActivity}
                          onReschedule={handleRescheduleActivity}
                          onSelect={handleSelectActivity}
                          isSelected={selectedActivities.includes(activity.activity_id)}
                        />
                      ))}
                    </div>
                  </div>
                )}

                {/* Êú™ÊéíÁ®ã‰ªªÂãô */}
                {groupedActivities.unscheduled.length > 0 && (
                  <div className={styles.taskGroup}>
                    <div className={styles.taskGroupHeader}>
                      <h4 className={styles.unscheduledHeader}>
                        üìù Êú™ÊéíÁ®ã ({groupedActivities.unscheduled.length})
                      </h4>
                    </div>
                    <div className={styles.taskList}>
                      {groupedActivities.unscheduled.map(activity => (
                        <TaskItem
                          key={activity.activity_id}
                          activity={activity}
                          onComplete={handleCompleteActivity}
                          onReschedule={handleRescheduleActivity}
                          onSelect={handleSelectActivity}
                          isSelected={selectedActivities.includes(activity.activity_id)}
                        />
                      ))}
                    </div>
                  </div>
                )}

                {/* Á©∫ÁãÄÊÖã */}
                {activities.length === 0 && !loadingActivities && (
                  <div className={styles.emptyTasks}>
                    <h4>üéâ Ê≤íÊúâÂæÖËæ¶‰ªªÂãô</h4>
                    <p>ÊâÄÊúâ‰ªªÂãôÈÉΩÂ∑≤ÂÆåÊàêÔºÅ</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}

        {showModal && (
          <div className={styles.modal}>
            <div className={styles.modalContent}>
              <div className={styles.modalHeader}>
                <h2>{editingProspect ? 'Á∑®ËºØÊ¥ΩË´áÊ°à' : 'Êñ∞Â¢ûÊ¥ΩË´áÊ°à'}</h2>
                <button 
                  className={styles.closeButton}
                  onClick={() => {
                    setShowModal(false);
                    resetForm();
                  }}
                >
                  √ó
                </button>
              </div>
              
              <form onSubmit={handleSubmit}>
                <div className={styles.formGrid}>
                  <div className={styles.formGroup}>
                    <label>ÂÆ¢Êà∂ÂêçÁ®± *</label>
                    <input
                      type="text"
                      value={formData.client_name}
                      onChange={(e) => setFormData({...formData, client_name: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Â∞àÊ°àÂêçÁ®± *</label>
                    <input
                      type="text"
                      value={formData.project_name}
                      onChange={(e) => setFormData({...formData, project_name: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>È†ê‰º∞ÈáëÈ°ç *</label>
                    <input
                      type="number"
                      value={formData.estimated_amount}
                      onChange={(e) => handleAmountChange(e.target.value)}
                      required
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÂàÜÊΩ§Ë®àÁÆóÊñπÂºè</label>
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                      <label style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <input
                          type="radio"
                          name="commission_type"
                          checked={!formData.use_fixed_commission}
                          onChange={() => {
                            const newRate = calculateCommissionRate(parseFloat(formData.estimated_amount) || 0);
                            setFormData({
                              ...formData, 
                              use_fixed_commission: false,
                              commission_rate: newRate
                            });
                          }}
                        />
                        ÈöéÊ¢ØÂºèÂàÜÊΩ§ (Ëá™ÂãïË®àÁÆó)
                      </label>
                      <label style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <input
                          type="radio"
                          name="commission_type"
                          checked={formData.use_fixed_commission}
                          onChange={() => setFormData({...formData, use_fixed_commission: true})}
                        />
                        Âõ∫ÂÆöÂàÜÊΩ§ÊØî‰æã
                      </label>
                    </div>
                  </div>
                  
                  {formData.use_fixed_commission && (
                    <div className={styles.formGroup}>
                      <label>Âõ∫ÂÆöÂàÜÊΩ§ÊØî‰æã (%) *</label>
                      <input
                        type="number"
                        min="0"
                        max="100"
                        value={formData.fixed_commission_percentage}
                        onChange={(e) => {
                          setFormData({
                            ...formData, 
                            fixed_commission_percentage: e.target.value,
                            commission_rate: parseFloat(e.target.value) || 0
                          });
                        }}
                        placeholder="Ë´ãËº∏ÂÖ•Âõ∫ÂÆöÂàÜÊΩ§ÊØî‰æã"
                        required
                      />
                    </div>
                  )}
                  
                  {!formData.use_fixed_commission && (
                    <div className={styles.formGroup}>
                      <label>ÈöéÊ¢ØÂºèÂàÜÊΩ§ÊØî‰æã</label>
                      <div style={{ 
                        padding: '8px 12px', 
                        backgroundColor: '#f9fafb', 
                        border: '1px solid #d1d5db', 
                        borderRadius: '6px',
                        fontSize: '14px',
                        color: '#6b7280'
                      }}>
                        {formData.estimated_amount ? 
                          `${formData.commission_rate}% (Ê†πÊìöÈáëÈ°ç NT$ ${parseFloat(formData.estimated_amount).toLocaleString()} Ëá™ÂãïË®àÁÆó)` : 
                          'Ë´ãÂÖàËº∏ÂÖ•È†ê‰º∞ÈáëÈ°ç‰ª•Ë®àÁÆóÂàÜÊΩ§ÊØî‰æã'
                        }
                      </div>
                      <small style={{ color: '#6b7280', fontSize: '12px', marginTop: '4px', display: 'block' }}>
                        ÈöéÊ¢ØÊ®ôÊ∫ñÔºö‚â§10Ëê¨(35%) | 10-30Ëê¨(30%) | 30-60Ëê¨(25%) | 60-100Ëê¨(20%) | &gt;100Ëê¨(10%)
                      </small>
                    </div>
                  )}
                  
                  <div className={styles.formGroup}>
                    <label>Ë≤†Ë≤¨‰∫∫ *</label>
                    <select
                      value={formData.owner_id}
                      onChange={(e) => setFormData({...formData, owner_id: e.target.value})}
                      required
                    >
                      <option value="">Ë´ãÈÅ∏ÊìáË≤†Ë≤¨‰∫∫</option>
                      {users.map(u => (
                        <option key={u.id} value={u.id}>{u.name} ({u.role === 'sales' ? 'Ê•≠Âãô' : '‰∏ªÁÆ°'})</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Ê¥ΩË´áÈöéÊÆµ</label>
                    <select
                      value={formData.stage}
                      onChange={(e) => setFormData({...formData, stage: e.target.value})}
                    >
                      {STAGES.filter(s => s.id !== 'Â∑≤ËΩâÊèõ').map(stage => (
                        <option key={stage.id} value={stage.id}>{stage.label}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>È†êË®àÁ∞ΩÁ¥ÑÊó•</label>
                    <input
                      type="date"
                      value={formData.expected_sign_date}
                      onChange={(e) => setFormData({...formData, expected_sign_date: e.target.value})}
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÂÆ¢Êà∂‰æÜÊ∫ê</label>
                    <input
                      type="text"
                      value={formData.source}
                      onChange={(e) => setFormData({...formData, source: e.target.value})}
                      placeholder="‰æãÔºöÁ∂≤Ë∑ØË°åÈä∑„ÄÅËΩâ‰ªãÁ¥π„ÄÅÈôåÁîüÈñãÁôº"
                    />
                  </div>

                  {/* Êà∞ÊÉÖÂÆ§Êñ∞Ê¨Ñ‰Ωç */}
                  <div className={styles.formGroup}>
                    <label>Êàê‰∫§ÁéáÊ®ôÁ±§</label>
                    <select
                      value={formData.close_rate}
                      onChange={(e) => setFormData({...formData, close_rate: e.target.value})}
                    >
                      {CLOSE_RATE_OPTIONS.map(rate => (
                        <option key={rate.value} value={rate.value}>{rate.label} ({rate.percentage}%)</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÂÆ¢Êà∂È†êÁÆóÁãÄÊÖã</label>
                    <select
                      value={formData.budget_status}
                      onChange={(e) => setFormData({...formData, budget_status: e.target.value})}
                    >
                      {BUDGET_STATUS_OPTIONS.map(status => (
                        <option key={status.value} value={status.value}>{status.label}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>‰∏ãÊ¨°ËøΩËπ§Êó•Êúü</label>
                    <input
                      type="date"
                      value={formData.next_followup_date}
                      onChange={(e) => setFormData({...formData, next_followup_date: e.target.value})}
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Ê±∫Á≠ñËÄÖÂßìÂêç</label>
                    <input
                      type="text"
                      value={formData.decision_maker_name}
                      onChange={(e) => setFormData({...formData, decision_maker_name: e.target.value})}
                      placeholder="Ë´ãËº∏ÂÖ•Ê±∫Á≠ñËÄÖÂßìÂêç"
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Ê±∫Á≠ñËÄÖËÅ∑‰Ωç</label>
                    <input
                      type="text"
                      value={formData.decision_maker_position}
                      onChange={(e) => setFormData({...formData, decision_maker_position: e.target.value})}
                      placeholder="‰æãÔºöÁ∏ΩÁ∂ìÁêÜ„ÄÅIT‰∏ªÁÆ°"
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Ê±∫Á≠ñËÄÖËÅØÁµ°ÊñπÂºè</label>
                    <input
                      type="text"
                      value={formData.decision_maker_contact}
                      onChange={(e) => setFormData({...formData, decision_maker_contact: e.target.value})}
                      placeholder="ÈõªË©±ÊàñEmail"
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>ÈóúÈçµÂΩ±ÈüøËÄÖ</label>
                    <textarea
                      value={formData.key_influencers}
                      onChange={(e) => setFormData({...formData, key_influencers: e.target.value})}
                      rows="2"
                      placeholder="Ë´ãÂàóÂá∫ÂÖ∂‰ªñÈáçË¶ÅÁöÑÂΩ±ÈüøÊ±∫Á≠ñ‰∫∫Âì°ÂèäÂÖ∂ËßíËâ≤..."
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>‰∏ªË¶ÅÁóõÈªû</label>
                    <textarea
                      value={formData.main_pain_points}
                      onChange={(e) => setFormData({...formData, main_pain_points: e.target.value})}
                      rows="2"
                      placeholder="ÂÆ¢Êà∂Èù¢Ëá®ÁöÑ‰∏ªË¶ÅÂïèÈ°åÊàñÈúÄÊ±ÇÁóõÈªû..."
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>Êàê‰∫§ÈòªÂäõ</label>
                    <textarea
                      value={formData.close_obstacles}
                      onChange={(e) => setFormData({...formData, close_obstacles: e.target.value})}
                      rows="2"
                      placeholder="ÂèØËÉΩÂΩ±ÈüøÊàê‰∫§ÁöÑÈöúÁ§ôÊàñÁñëÊÖÆ..."
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Á´∂Áà≠Â∞çÊâã</label>
                    <input
                      type="text"
                      value={formData.competitor_name}
                      onChange={(e) => setFormData({...formData, competitor_name: e.target.value})}
                      placeholder="‰∏ªË¶ÅÁ´∂Áà≠Â∞çÊâãÂêçÁ®±"
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Á´∂Áà≠ÁãÄÊÖã</label>
                    <select
                      value={formData.competitor_status}
                      onChange={(e) => setFormData({...formData, competitor_status: e.target.value})}
                    >
                      <option value="none">ÁÑ°Á´∂Áà≠Â∞çÊâã</option>
                      <option value="leading">ÊàëÊñπÈ†òÂÖà</option>
                      <option value="competing">ÊøÄÁÉàÁ´∂Áà≠</option>
                      <option value="disadvantage">Â∞çÊñπÈ†òÂÖà</option>
                      <option value="unknown">ÁãÄÊÖã‰∏çÊòé</option>
                    </select>
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>ÂÇôË®ª</label>
                    <textarea
                      value={formData.note}
                      onChange={(e) => setFormData({...formData, note: e.target.value})}
                      rows="3"
                    />
                  </div>
                </div>
                
                <div className={styles.modalFooter}>
                  <button type="button" onClick={() => {
                    setShowModal(false);
                    resetForm();
                  }}>
                    ÂèñÊ∂à
                  </button>
                  <button type="submit" className={styles.submitButton}>
                    {editingProspect ? 'Êõ¥Êñ∞' : 'Êñ∞Â¢û'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* ÂçîÂä©Ë´ãÊ±ÇÂΩàÁ™ó */}
        {showAssistanceModal && (
          <div className={styles.modal}>
            <div className={styles.modalContent}>
              <div className={styles.modalHeader}>
                <h2>Ë´ãÊ±Ç‰∏ªÁÆ°ÂçîÂä©</h2>
                <button 
                  className={styles.closeButton}
                  onClick={() => {
                    setShowAssistanceModal(false);
                    setAssistanceForm({
                      type: 'review_quote',
                      priority: 'medium',
                      description: '',
                      deadline: ''
                    });
                  }}
                >
                  √ó
                </button>
              </div>
              
              <form onSubmit={handleAssistanceRequest}>
                <div className={styles.formGrid}>
                  <div className={styles.formGroup}>
                    <label>Ê°à‰ª∂Ë≥áË®ä</label>
                    <div style={{ 
                      padding: '8px 12px', 
                      backgroundColor: '#f9fafb', 
                      border: '1px solid #d1d5db', 
                      borderRadius: '6px',
                      fontSize: '14px',
                      color: '#6b7280'
                    }}>
                      {selectedProspect?.client_name} - {selectedProspect?.project_name}
                    </div>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÂçîÂä©È°ûÂûã *</label>
                    <select
                      value={assistanceForm.type}
                      onChange={(e) => setAssistanceForm({...assistanceForm, type: e.target.value})}
                      required
                    >
                      {ASSISTANCE_TYPES.map(type => (
                        <option key={type.value} value={type.value}>{type.label}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÂÑ™ÂÖàÁ≠âÁ¥ö *</label>
                    <select
                      value={assistanceForm.priority}
                      onChange={(e) => setAssistanceForm({...assistanceForm, priority: e.target.value})}
                      required
                    >
                      {PRIORITY_OPTIONS.map(priority => (
                        <option key={priority.value} value={priority.value}>{priority.label}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Â∏åÊúõÂÆåÊàêÊó•Êúü</label>
                    <input
                      type="datetime-local"
                      value={assistanceForm.deadline}
                      onChange={(e) => setAssistanceForm({...assistanceForm, deadline: e.target.value})}
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>Ë©≥Á¥∞Ë™™Êòé *</label>
                    <textarea
                      value={assistanceForm.description}
                      onChange={(e) => setAssistanceForm({...assistanceForm, description: e.target.value})}
                      rows="4"
                      placeholder="Ë´ãË©≥Á¥∞Ë™™ÊòéÈúÄË¶ÅÂçîÂä©ÁöÑÂÖ∑È´îÂÖßÂÆπ„ÄÅËÉåÊôØÊÉÖÊ≥ÅÂèäÊúüÊúõÁµêÊûú..."
                      required
                    />
                  </div>
                </div>
                
                <div className={styles.modalFooter}>
                  <button type="button" onClick={() => {
                    setShowAssistanceModal(false);
                    setAssistanceForm({
                      type: 'review_quote',
                      priority: 'medium',
                      description: '',
                      deadline: ''
                    });
                  }}>
                    ÂèñÊ∂à
                  </button>
                  <button type="submit" className={styles.submitButton}>
                    ÁôºÈÄÅÂçîÂä©Ë´ãÊ±Ç
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Êñ∞Â¢ûË°åÂãïË®òÈåÑÂΩàÁ™ó */}
        {showActionModal && (
          <div className={styles.modal}>
            <div className={styles.modalContent}>
              <div className={styles.modalHeader}>
                <h2>Êñ∞Â¢ûË°åÂãïË®òÈåÑ</h2>
                <button 
                  className={styles.closeButton}
                  onClick={() => {
                    setShowActionModal(false);
                    setActionForm({
                      action_type: 'phone',
                      content: '',
                      next_followup_date: '',
                      attachments: []
                    });
                  }}
                >
                  √ó
                </button>
              </div>
              
              <form onSubmit={handleAddAction}>
                <div className={styles.formGrid}>
                  <div className={styles.formGroup}>
                    <label>Ê°à‰ª∂Ë≥áË®ä</label>
                    <div style={{ 
                      padding: '8px 12px', 
                      backgroundColor: '#f9fafb', 
                      border: '1px solid #d1d5db', 
                      borderRadius: '6px',
                      fontSize: '14px',
                      color: '#6b7280'
                    }}>
                      {selectedProspect?.client_name} - {selectedProspect?.project_name}
                    </div>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>Ë°åÂãïÈ°ûÂûã *</label>
                    <select
                      value={actionForm.action_type}
                      onChange={(e) => setActionForm({...actionForm, action_type: e.target.value})}
                      required
                    >
                      {ACTION_TYPES.map(type => (
                        <option key={type.value} value={type.value}>
                          {type.icon} {type.label}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>‰∏ãÊ¨°ËøΩËπ§Êó•Êúü</label>
                    <input
                      type="date"
                      value={actionForm.next_followup_date}
                      onChange={(e) => setActionForm({...actionForm, next_followup_date: e.target.value})}
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÈôÑ‰ª∂‰∏äÂÇ≥</label>
                    <input
                      type="file"
                      multiple
                      onChange={handleActionFileUpload}
                      accept=".pdf,.doc,.docx,.xlsx,.jpg,.jpeg,.png"
                    />
                    <div className={styles.uploadHint}>
                      ÊîØÊè¥Â§öÂÄãÊ™îÊ°àÔºöPDF, DOC, DOCX, XLSX, JPG, PNG
                    </div>
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>Ë°åÂãïÂÖßÂÆπ *</label>
                    <textarea
                      value={actionForm.content}
                      onChange={(e) => setActionForm({...actionForm, content: e.target.value})}
                      rows="4"
                      placeholder="Ë´ãË©≥Á¥∞Ë®òÈåÑÈÄôÊ¨°ÁöÑÊ•≠ÂãôÊ¥ªÂãïÂÖßÂÆπ„ÄÅÂÆ¢Êà∂ÂèçÊáâ„ÄÅÈáçË¶ÅÁµêË´ñÁ≠â..."
                      required
                    />
                  </div>
                  
                  {/* Â∑≤‰∏äÂÇ≥ÁöÑÈôÑ‰ª∂È†êË¶Ω */}
                  {actionForm.attachments.length > 0 && (
                    <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                      <label>Â∑≤‰∏äÂÇ≥ÈôÑ‰ª∂</label>
                      <div className={styles.attachmentPreview}>
                        {actionForm.attachments.map((file, index) => (
                          <div key={index} className={styles.attachmentItem}>
                            <span className={styles.attachmentName}>üìé {file.name}</span>
                            <button
                              type="button"
                              onClick={() => removeActionAttachment(index)}
                              className={styles.removeAttachment}
                            >
                              ‚úï
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                
                <div className={styles.modalFooter}>
                  <button type="button" onClick={() => {
                    setShowActionModal(false);
                    setActionForm({
                      action_type: 'phone',
                      content: '',
                      next_followup_date: '',
                      attachments: []
                    });
                  }}>
                    ÂèñÊ∂à
                  </button>
                  <button type="submit" className={styles.submitButton}>
                    Êñ∞Â¢ûË°åÂãïË®òÈåÑ
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

      {/* ÁµêÊ°àÂ∞çË©±Ê°Ü */}
      {showClosingDialog && closingProspect && (
        <div className={styles.modalOverlay}>
          <div className={`${styles.modal} ${styles.closingModal}`}>
            <div className={styles.modalHeader}>
              <h3>
                {closingForm.result === 'won' ? 'üéâ Ê°à‰ª∂ÁµêÊ°à - Ë¥èÂñÆ' : '‚ùå Ê°à‰ª∂ÁµêÊ°à - Â§±ÂñÆ'}
              </h3>
              <button 
                className={styles.closeButton}
                onClick={handleClosingCancel}
              >
                √ó
              </button>
            </div>
            
            <form onSubmit={handleClosingSubmit}>
              <div className={styles.modalBody}>
                <div className={styles.closingProspectInfo}>
                  <h4>{closingProspect.client_name} - {closingProspect.project_name}</h4>
                  <p>È†ê‰º∞ÈáëÈ°ç: NT$ {parseInt(closingProspect.estimated_amount || 0).toLocaleString()}</p>
                </div>
                
                <div className={styles.formGrid}>
                  <div className={styles.formGroup}>
                    <label>ÁµêÊûúÈ°ûÂûã *</label>
                    <select
                      value={closingForm.result}
                      onChange={(e) => setClosingForm({...closingForm, result: e.target.value})}
                      required
                    >
                      <option value="won">üéâ Ë¥èÂñÆ - ÊàêÂäüÁ∞ΩÁ¥Ñ</option>
                      <option value="lost">‚ùå Â§±ÂñÆ - Êú™Êàê‰∫§</option>
                    </select>
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÁµêÊ°àÊó•Êúü *</label>
                    <input
                      type="date"
                      value={closingForm.close_date}
                      onChange={(e) => setClosingForm({...closingForm, close_date: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className={styles.formGroup}>
                    <label>ÊúÄÁµÇÈáëÈ°ç *</label>
                    <input
                      type="number"
                      placeholder="ÊúÄÁµÇÁ∞ΩÁ¥Ñ/Â†±ÂÉπÈáëÈ°ç"
                      value={closingForm.final_amount}
                      onChange={(e) => setClosingForm({...closingForm, final_amount: e.target.value})}
                      required
                    />
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>
                      {closingForm.result === 'won' ? 'Ë¥èÂñÆÂéüÂõ† *' : 'Â§±ÂñÆÂéüÂõ† *'}
                    </label>
                    <select
                      value={closingForm.reason}
                      onChange={(e) => setClosingForm({...closingForm, reason: e.target.value})}
                      required
                    >
                      <option value="">Ë´ãÈÅ∏ÊìáÂéüÂõ†</option>
                      {closingForm.result === 'won' ? (
                        <>
                          <option value="ÂÉπÊ†ºÂÑ™Âã¢">ÂÉπÊ†ºÊúâÁ´∂Áà≠ÂÑ™Âã¢</option>
                          <option value="Áî¢ÂìÅÁ¨¶ÂêàÈúÄÊ±Ç">Áî¢ÂìÅÂäüËÉΩÁ¨¶ÂêàÈúÄÊ±Ç</option>
                          <option value="ÊúçÂãôÂìÅË≥™‰Ω≥">ÊúçÂãôÂìÅË≥™Áç≤ÂæóË™çÂèØ</option>
                          <option value="Èóú‰øÇËâØÂ•Ω">ÂÆ¢Êà∂Èóú‰øÇÁ∂≠Ë≠∑ËâØÂ•Ω</option>
                          <option value="ÊôÇÊ©üÊÅ∞Áï∂">Êé®Âá∫ÊôÇÊ©üÊÅ∞Áï∂</option>
                          <option value="ÂÖ∂‰ªñ">ÂÖ∂‰ªñÂéüÂõ†</option>
                        </>
                      ) : (
                        <>
                          <option value="ÂÉπÊ†ºÈÅéÈ´ò">ÂÉπÊ†º‰∏çÁ¨¶ÂêàÈ†êÁÆó</option>
                          <option value="Áî¢ÂìÅ‰∏çÁ¨¶ÈúÄÊ±Ç">Áî¢ÂìÅÂäüËÉΩ‰∏çÁ¨¶ÂêàÈúÄÊ±Ç</option>
                          <option value="ÈÅ∏ÊìáÁ´∂Áà≠Â∞çÊâã">ÂÆ¢Êà∂ÈÅ∏ÊìáÁ´∂Áà≠Â∞çÊâã</option>
                          <option value="È†êÁÆóÂèñÊ∂à">ÂÆ¢Êà∂È†êÁÆóÂèñÊ∂àÊàñÂª∂Âæå</option>
                          <option value="Ê±∫Á≠ñÊµÅÁ®ãÂÜóÈï∑">ÂÆ¢Êà∂Ê±∫Á≠ñÊµÅÁ®ãÈÅéÈï∑</option>
                          <option value="ÂÖ∂‰ªñ">ÂÖ∂‰ªñÂéüÂõ†</option>
                        </>
                      )}
                    </select>
                  </div>
                  
                  <div className={styles.formGroup} style={{ gridColumn: 'span 2' }}>
                    <label>Ë£úÂÖÖË™™Êòé</label>
                    <textarea
                      placeholder="Ë©≥Á¥∞Ë™™ÊòéÁµêÊ°àÂéüÂõ†„ÄÅÂæåÁ∫åËôïÁêÜÊñπÂºèÁ≠â..."
                      value={closingForm.notes}
                      onChange={(e) => setClosingForm({...closingForm, notes: e.target.value})}
                      rows={3}
                    />
                  </div>
                </div>
              </div>
              
              <div className={styles.modalFooter}>
                <button type="button" onClick={handleClosingCancel}>
                  ÂèñÊ∂à
                </button>
                <button 
                  type="submit" 
                  className={`${styles.submitButton} ${closingForm.result === 'won' ? styles.winButton : styles.loseButton}`}
                >
                  {closingForm.result === 'won' ? 'Á¢∫Ë™çË¥èÂñÆ' : 'Á¢∫Ë™çÂ§±ÂñÆ'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* ÊâãÊ©üÁâàÂ∫ïÈÉ®Â∞éË¶Ω */}
      <div className={styles.mobileBottomNav}>
        <button 
          className={`${styles.navButton} ${viewMode === 'priority' ? styles.active : ''}`}
          onClick={() => setViewMode('priority')}
        >
          <span className={styles.navIcon}>üéØ</span>
          <span className={styles.navLabel}>Êà∞ÊÉÖÂÆ§</span>
        </button>
        <button 
          className={`${styles.navButton} ${viewMode === 'kanban' ? styles.active : ''}`}
          onClick={() => setViewMode('kanban')}
        >
          <span className={styles.navIcon}>üìã</span>
          <span className={styles.navLabel}>ÁÆ°ÈÅìÁúãÊùø</span>
        </button>
        <button 
          className={`${styles.navButton} ${viewMode === 'tasks' ? styles.active : ''}`}
          onClick={() => setViewMode('tasks')}
        >
          <span className={styles.navIcon}>‚úÖ</span>
          <span className={styles.navLabel}>ÊàëÁöÑ‰ªªÂãô</span>
        </button>
      </div>
      </div>
  );
}

// TaskItem ÁµÑ‰ª∂
function TaskItem({ activity, onComplete, onReschedule, onSelect, isSelected }) {
  const getActivityIcon = (type) => {
    const typeMap = {
      phone: 'üìû',
      meet: 'ü§ù',
      demo: 'üìä',
      quote: 'üí∞',
      send: 'üìÑ',
      visit: 'üè¢',
      presentation: 'üñ•Ô∏è',
      negotiation: 'üí¨',
      contract: '‚úçÔ∏è',
      followup: 'üìã',
      other: 'üìù'
    };
    return typeMap[type] || 'üìù';
  };

  const getActivityTypeLabel = (type) => {
    const labelMap = {
      phone: 'ÈõªË©±ËÅØÁµ°',
      meet: 'Èù¢Ë´áÊúÉË≠∞',
      demo: 'Áî¢ÂìÅÂ±ïÁ§∫',
      quote: 'Â†±ÂÉπÊèê‰æõ',
      send: 'Ë≥áÊñôÂØÑÈÄÅ',
      visit: 'ÂÆ¢Êà∂ÊãúË®™',
      presentation: 'Áî¢ÂìÅÁ∞°Â†±',
      negotiation: 'ÂÉπÊ†ºË´áÂà§',
      contract: 'ÂêàÁ¥ÑÁ∞ΩÁΩ≤',
      followup: 'ÂæåÁ∫åËøΩËπ§',
      other: 'ÂÖ∂‰ªñ'
    };
    return labelMap[type] || 'ÂÖ∂‰ªñ';
  };

  const formatDueDate = (dueAt) => {
    if (!dueAt) return 'Êú™Ë®≠ÂÆö';
    
    const now = new Date();
    const due = new Date(dueAt);
    const diffTime = due.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) {
      return `ÈÄæÊúü ${Math.abs(diffDays)} Â§©`;
    } else if (diffDays === 0) {
      return '‰ªäÂ§©';
    } else if (diffDays === 1) {
      return 'ÊòéÂ§©';
    } else {
      return `${diffDays} Â§©Âæå`;
    }
  };

  const getDueDateClass = (dueAt) => {
    if (!dueAt) return '';
    
    const now = new Date();
    const due = new Date(dueAt);
    const diffTime = due.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return 'overdue';
    if (diffDays === 0) return 'today';
    if (diffDays <= 3) return 'soon';
    return 'future';
  };

  return (
    <div className={`${styles.taskItem} ${isSelected ? styles.selected : ''}`}>
      <div className={styles.taskCheckbox}>
        <input
          type="checkbox"
          checked={isSelected}
          onChange={(e) => onSelect(activity.activity_id, e.target.checked)}
        />
      </div>
      
      <div className={styles.taskIcon}>
        {getActivityIcon(activity.type)}
      </div>
      
      <div className={styles.taskContent}>
        <div className={styles.taskHeader}>
          <span className={styles.taskType}>
            {getActivityTypeLabel(activity.type)}
          </span>
          <span className={`${styles.taskDue} ${styles[getDueDateClass(activity.due_at)]}`}>
            {formatDueDate(activity.due_at)}
          </span>
        </div>
        
        <div className={styles.taskTitle}>
          {activity.deal?.client_name} - {activity.deal?.project_name}
        </div>
        
        {activity.note && (
          <div className={styles.taskNote}>
            {activity.note}
          </div>
        )}
        
        <div className={styles.taskMeta}>
          <span className={styles.taskOwner}>
            Ë≤†Ë≤¨‰∫∫: {activity.owner?.name}
          </span>
          {activity.due_at && (
            <span className={styles.taskDate}>
              Âà∞Êúü: {new Date(activity.due_at).toLocaleDateString()}
            </span>
          )}
        </div>
      </div>
      
      <div className={styles.taskActions}>
        <button
          onClick={() => onComplete(activity.activity_id)}
          className={styles.completeButton}
          title="ÂÆåÊàê‰ªªÂãô"
        >
          ‚úÖ
        </button>
        <button
          onClick={() => {
            const newDate = prompt('Ë´ãËº∏ÂÖ•Êñ∞ÁöÑÂà∞ÊúüÊó•Êúü (YYYY-MM-DD):');
            if (newDate) {
              onReschedule(activity.activity_id, newDate);
            }
          }}
          className={styles.rescheduleButton}
          title="ÊîπÊúü"
        >
          üìÖ
        </button>
      </div>
    </div>
  );
}